// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gtfs-realtime.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gtfs-realtime.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace transit_realtime {

void protobuf_ShutdownFile_gtfs_2drealtime_2eproto() {
  delete FeedMessage::default_instance_;
  delete FeedHeader::default_instance_;
  delete FeedEntity::default_instance_;
  delete TripUpdate::default_instance_;
  delete TripUpdate_StopTimeEvent::default_instance_;
  delete TripUpdate_StopTimeUpdate::default_instance_;
  delete VehiclePosition::default_instance_;
  delete Alert::default_instance_;
  delete TimeRange::default_instance_;
  delete Position::default_instance_;
  delete TripDescriptor::default_instance_;
  delete VehicleDescriptor::default_instance_;
  delete EntitySelector::default_instance_;
  delete TranslatedString::default_instance_;
  delete TranslatedString_Translation::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_gtfs_2drealtime_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_gtfs_2drealtime_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  FeedMessage::default_instance_ = new FeedMessage();
  FeedHeader::default_instance_ = new FeedHeader();
  FeedEntity::default_instance_ = new FeedEntity();
  TripUpdate::default_instance_ = new TripUpdate();
  TripUpdate_StopTimeEvent::default_instance_ = new TripUpdate_StopTimeEvent();
  TripUpdate_StopTimeUpdate::default_instance_ = new TripUpdate_StopTimeUpdate();
  VehiclePosition::default_instance_ = new VehiclePosition();
  Alert::default_instance_ = new Alert();
  TimeRange::default_instance_ = new TimeRange();
  Position::default_instance_ = new Position();
  TripDescriptor::default_instance_ = new TripDescriptor();
  VehicleDescriptor::default_instance_ = new VehicleDescriptor();
  EntitySelector::default_instance_ = new EntitySelector();
  TranslatedString::default_instance_ = new TranslatedString();
  TranslatedString_Translation::default_instance_ = new TranslatedString_Translation();
  FeedMessage::default_instance_->InitAsDefaultInstance();
  FeedHeader::default_instance_->InitAsDefaultInstance();
  FeedEntity::default_instance_->InitAsDefaultInstance();
  TripUpdate::default_instance_->InitAsDefaultInstance();
  TripUpdate_StopTimeEvent::default_instance_->InitAsDefaultInstance();
  TripUpdate_StopTimeUpdate::default_instance_->InitAsDefaultInstance();
  VehiclePosition::default_instance_->InitAsDefaultInstance();
  Alert::default_instance_->InitAsDefaultInstance();
  TimeRange::default_instance_->InitAsDefaultInstance();
  Position::default_instance_->InitAsDefaultInstance();
  TripDescriptor::default_instance_->InitAsDefaultInstance();
  VehicleDescriptor::default_instance_->InitAsDefaultInstance();
  EntitySelector::default_instance_->InitAsDefaultInstance();
  TranslatedString::default_instance_->InitAsDefaultInstance();
  TranslatedString_Translation::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gtfs_2drealtime_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_gtfs_2drealtime_2eproto_once_);
void protobuf_AddDesc_gtfs_2drealtime_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_gtfs_2drealtime_2eproto_once_,
                 &protobuf_AddDesc_gtfs_2drealtime_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gtfs_2drealtime_2eproto {
  StaticDescriptorInitializer_gtfs_2drealtime_2eproto() {
    protobuf_AddDesc_gtfs_2drealtime_2eproto();
  }
} static_descriptor_initializer_gtfs_2drealtime_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int FeedMessage::kHeaderFieldNumber;
const int FeedMessage::kEntityFieldNumber;
#endif  // !_MSC_VER

FeedMessage::FeedMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FeedMessage::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  header_ = const_cast< ::transit_realtime::FeedHeader*>(
      ::transit_realtime::FeedHeader::internal_default_instance());
#else
  header_ = const_cast< ::transit_realtime::FeedHeader*>(&::transit_realtime::FeedHeader::default_instance());
#endif
}

FeedMessage::FeedMessage(const FeedMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FeedMessage::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeedMessage::~FeedMessage() {
  SharedDtor();
}

void FeedMessage::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete header_;
  }
}

void FeedMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FeedMessage& FeedMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_gtfs_2drealtime_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_gtfs_2drealtime_2eproto();
#endif
  return *default_instance_;
}

FeedMessage* FeedMessage::default_instance_ = NULL;

FeedMessage* FeedMessage::New() const {
  return new FeedMessage;
}

void FeedMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::transit_realtime::FeedHeader::Clear();
    }
  }
  entity_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FeedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .transit_realtime.FeedHeader header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entity;
        break;
      }

      // repeated .transit_realtime.FeedEntity entity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entity;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FeedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .transit_realtime.FeedHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->header(), output);
  }

  // repeated .transit_realtime.FeedEntity entity = 2;
  for (int i = 0; i < this->entity_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->entity(i), output);
  }

}

int FeedMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .transit_realtime.FeedHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

  }
  // repeated .transit_realtime.FeedEntity entity = 2;
  total_size += 1 * this->entity_size();
  for (int i = 0; i < this->entity_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entity(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeedMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FeedMessage*>(&from));
}

void FeedMessage::MergeFrom(const FeedMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  entity_.MergeFrom(from.entity_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::transit_realtime::FeedHeader::MergeFrom(from.header());
    }
  }
}

void FeedMessage::CopyFrom(const FeedMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  for (int i = 0; i < entity_size(); i++) {
    if (!this->entity(i).IsInitialized()) return false;
  }
  return true;
}

void FeedMessage::Swap(FeedMessage* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    entity_.Swap(&other->entity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FeedMessage::GetTypeName() const {
  return "transit_realtime.FeedMessage";
}


// ===================================================================

bool FeedHeader_Incrementality_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FeedHeader_Incrementality FeedHeader::FULL_DATASET;
const FeedHeader_Incrementality FeedHeader::DIFFERENTIAL;
const FeedHeader_Incrementality FeedHeader::Incrementality_MIN;
const FeedHeader_Incrementality FeedHeader::Incrementality_MAX;
const int FeedHeader::Incrementality_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int FeedHeader::kGtfsRealtimeVersionFieldNumber;
const int FeedHeader::kIncrementalityFieldNumber;
const int FeedHeader::kTimestampFieldNumber;
#endif  // !_MSC_VER

FeedHeader::FeedHeader()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FeedHeader::InitAsDefaultInstance() {
}

FeedHeader::FeedHeader(const FeedHeader& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FeedHeader::SharedCtor() {
  _cached_size_ = 0;
  gtfs_realtime_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  incrementality_ = 0;
  timestamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeedHeader::~FeedHeader() {
  SharedDtor();
}

void FeedHeader::SharedDtor() {
  if (gtfs_realtime_version_ != &::google::protobuf::internal::kEmptyString) {
    delete gtfs_realtime_version_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FeedHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FeedHeader& FeedHeader::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_gtfs_2drealtime_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_gtfs_2drealtime_2eproto();
#endif
  return *default_instance_;
}

FeedHeader* FeedHeader::default_instance_ = NULL;

FeedHeader* FeedHeader::New() const {
  return new FeedHeader;
}

void FeedHeader::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gtfs_realtime_version()) {
      if (gtfs_realtime_version_ != &::google::protobuf::internal::kEmptyString) {
        gtfs_realtime_version_->clear();
      }
    }
    incrementality_ = 0;
    timestamp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FeedHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string gtfs_realtime_version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gtfs_realtime_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_incrementality;
        break;
      }

      // optional .transit_realtime.FeedHeader.Incrementality incrementality = 2 [default = FULL_DATASET];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_incrementality:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::transit_realtime::FeedHeader_Incrementality_IsValid(value)) {
            set_incrementality(static_cast< ::transit_realtime::FeedHeader_Incrementality >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_timestamp;
        break;
      }

      // optional uint64 timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((8000u <= tag && tag < 16000u)) {
        #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
          DO_(_extensions_.ParseField(tag, input, &default_instance()));
        #else
          DO_(_extensions_.ParseField(tag, input, default_instance_));
        #endif
          continue;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FeedHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string gtfs_realtime_version = 1;
  if (has_gtfs_realtime_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->gtfs_realtime_version(), output);
  }

  // optional .transit_realtime.FeedHeader.Incrementality incrementality = 2 [default = FULL_DATASET];
  if (has_incrementality()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->incrementality(), output);
  }

  // optional uint64 timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->timestamp(), output);
  }

  // Extension range [1000, 2000)
  _extensions_.SerializeWithCachedSizes(
      1000, 2000, output);

}

int FeedHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string gtfs_realtime_version = 1;
    if (has_gtfs_realtime_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gtfs_realtime_version());
    }

    // optional .transit_realtime.FeedHeader.Incrementality incrementality = 2 [default = FULL_DATASET];
    if (has_incrementality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->incrementality());
    }

    // optional uint64 timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

  }
  total_size += _extensions_.ByteSize();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeedHeader::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FeedHeader*>(&from));
}

void FeedHeader::MergeFrom(const FeedHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gtfs_realtime_version()) {
      set_gtfs_realtime_version(from.gtfs_realtime_version());
    }
    if (from.has_incrementality()) {
      set_incrementality(from.incrementality());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
}

void FeedHeader::CopyFrom(const FeedHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void FeedHeader::Swap(FeedHeader* other) {
  if (other != this) {
    std::swap(gtfs_realtime_version_, other->gtfs_realtime_version_);
    std::swap(incrementality_, other->incrementality_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::std::string FeedHeader::GetTypeName() const {
  return "transit_realtime.FeedHeader";
}


// ===================================================================

#ifndef _MSC_VER
const int FeedEntity::kIdFieldNumber;
const int FeedEntity::kIsDeletedFieldNumber;
const int FeedEntity::kTripUpdateFieldNumber;
const int FeedEntity::kVehicleFieldNumber;
const int FeedEntity::kAlertFieldNumber;
#endif  // !_MSC_VER

FeedEntity::FeedEntity()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FeedEntity::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  trip_update_ = const_cast< ::transit_realtime::TripUpdate*>(
      ::transit_realtime::TripUpdate::internal_default_instance());
#else
  trip_update_ = const_cast< ::transit_realtime::TripUpdate*>(&::transit_realtime::TripUpdate::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  vehicle_ = const_cast< ::transit_realtime::VehiclePosition*>(
      ::transit_realtime::VehiclePosition::internal_default_instance());
#else
  vehicle_ = const_cast< ::transit_realtime::VehiclePosition*>(&::transit_realtime::VehiclePosition::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  alert_ = const_cast< ::transit_realtime::Alert*>(
      ::transit_realtime::Alert::internal_default_instance());
#else
  alert_ = const_cast< ::transit_realtime::Alert*>(&::transit_realtime::Alert::default_instance());
#endif
}

FeedEntity::FeedEntity(const FeedEntity& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FeedEntity::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_deleted_ = false;
  trip_update_ = NULL;
  vehicle_ = NULL;
  alert_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeedEntity::~FeedEntity() {
  SharedDtor();
}

void FeedEntity::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete trip_update_;
    delete vehicle_;
    delete alert_;
  }
}

void FeedEntity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FeedEntity& FeedEntity::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_gtfs_2drealtime_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_gtfs_2drealtime_2eproto();
#endif
  return *default_instance_;
}

FeedEntity* FeedEntity::default_instance_ = NULL;

FeedEntity* FeedEntity::New() const {
  return new FeedEntity;
}

void FeedEntity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    is_deleted_ = false;
    if (has_trip_update()) {
      if (trip_update_ != NULL) trip_update_->::transit_realtime::TripUpdate::Clear();
    }
    if (has_vehicle()) {
      if (vehicle_ != NULL) vehicle_->::transit_realtime::VehiclePosition::Clear();
    }
    if (has_alert()) {
      if (alert_ != NULL) alert_->::transit_realtime::Alert::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FeedEntity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_deleted;
        break;
      }

      // optional bool is_deleted = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_deleted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_deleted_)));
          set_has_is_deleted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_trip_update;
        break;
      }

      // optional .transit_realtime.TripUpdate trip_update = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trip_update:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trip_update()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_vehicle;
        break;
      }

      // optional .transit_realtime.VehiclePosition vehicle = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vehicle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vehicle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_alert;
        break;
      }

      // optional .transit_realtime.Alert alert = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alert:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alert()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FeedEntity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional bool is_deleted = 2 [default = false];
  if (has_is_deleted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_deleted(), output);
  }

  // optional .transit_realtime.TripUpdate trip_update = 3;
  if (has_trip_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->trip_update(), output);
  }

  // optional .transit_realtime.VehiclePosition vehicle = 4;
  if (has_vehicle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->vehicle(), output);
  }

  // optional .transit_realtime.Alert alert = 5;
  if (has_alert()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->alert(), output);
  }

}

int FeedEntity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional bool is_deleted = 2 [default = false];
    if (has_is_deleted()) {
      total_size += 1 + 1;
    }

    // optional .transit_realtime.TripUpdate trip_update = 3;
    if (has_trip_update()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trip_update());
    }

    // optional .transit_realtime.VehiclePosition vehicle = 4;
    if (has_vehicle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vehicle());
    }

    // optional .transit_realtime.Alert alert = 5;
    if (has_alert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alert());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeedEntity::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FeedEntity*>(&from));
}

void FeedEntity::MergeFrom(const FeedEntity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_is_deleted()) {
      set_is_deleted(from.is_deleted());
    }
    if (from.has_trip_update()) {
      mutable_trip_update()->::transit_realtime::TripUpdate::MergeFrom(from.trip_update());
    }
    if (from.has_vehicle()) {
      mutable_vehicle()->::transit_realtime::VehiclePosition::MergeFrom(from.vehicle());
    }
    if (from.has_alert()) {
      mutable_alert()->::transit_realtime::Alert::MergeFrom(from.alert());
    }
  }
}

void FeedEntity::CopyFrom(const FeedEntity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedEntity::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_trip_update()) {
    if (!this->trip_update().IsInitialized()) return false;
  }
  if (has_vehicle()) {
    if (!this->vehicle().IsInitialized()) return false;
  }
  if (has_alert()) {
    if (!this->alert().IsInitialized()) return false;
  }
  return true;
}

void FeedEntity::Swap(FeedEntity* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(is_deleted_, other->is_deleted_);
    std::swap(trip_update_, other->trip_update_);
    std::swap(vehicle_, other->vehicle_);
    std::swap(alert_, other->alert_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FeedEntity::GetTypeName() const {
  return "transit_realtime.FeedEntity";
}


// ===================================================================

#ifndef _MSC_VER
const int TripUpdate_StopTimeEvent::kDelayFieldNumber;
const int TripUpdate_StopTimeEvent::kTimeFieldNumber;
const int TripUpdate_StopTimeEvent::kUncertaintyFieldNumber;
#endif  // !_MSC_VER

TripUpdate_StopTimeEvent::TripUpdate_StopTimeEvent()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TripUpdate_StopTimeEvent::InitAsDefaultInstance() {
}

TripUpdate_StopTimeEvent::TripUpdate_StopTimeEvent(const TripUpdate_StopTimeEvent& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TripUpdate_StopTimeEvent::SharedCtor() {
  _cached_size_ = 0;
  delay_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  uncertainty_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TripUpdate_StopTimeEvent::~TripUpdate_StopTimeEvent() {
  SharedDtor();
}

void TripUpdate_StopTimeEvent::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TripUpdate_StopTimeEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TripUpdate_StopTimeEvent& TripUpdate_StopTimeEvent::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_gtfs_2drealtime_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_gtfs_2drealtime_2eproto();
#endif
  return *default_instance_;
}

TripUpdate_StopTimeEvent* TripUpdate_StopTimeEvent::default_instance_ = NULL;

TripUpdate_StopTimeEvent* TripUpdate_StopTimeEvent::New() const {
  return new TripUpdate_StopTimeEvent;
}

void TripUpdate_StopTimeEvent::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    delay_ = 0;
    time_ = GOOGLE_LONGLONG(0);
    uncertainty_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TripUpdate_StopTimeEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 delay = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delay_)));
          set_has_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional int64 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uncertainty;
        break;
      }

      // optional int32 uncertainty = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uncertainty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uncertainty_)));
          set_has_uncertainty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((8000u <= tag && tag < 16000u)) {
        #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
          DO_(_extensions_.ParseField(tag, input, &default_instance()));
        #else
          DO_(_extensions_.ParseField(tag, input, default_instance_));
        #endif
          continue;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TripUpdate_StopTimeEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 delay = 1;
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->delay(), output);
  }

  // optional int64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time(), output);
  }

  // optional int32 uncertainty = 3;
  if (has_uncertainty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->uncertainty(), output);
  }

  // Extension range [1000, 2000)
  _extensions_.SerializeWithCachedSizes(
      1000, 2000, output);

}

int TripUpdate_StopTimeEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 delay = 1;
    if (has_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delay());
    }

    // optional int64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional int32 uncertainty = 3;
    if (has_uncertainty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uncertainty());
    }

  }
  total_size += _extensions_.ByteSize();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TripUpdate_StopTimeEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TripUpdate_StopTimeEvent*>(&from));
}

void TripUpdate_StopTimeEvent::MergeFrom(const TripUpdate_StopTimeEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_delay()) {
      set_delay(from.delay());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_uncertainty()) {
      set_uncertainty(from.uncertainty());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
}

void TripUpdate_StopTimeEvent::CopyFrom(const TripUpdate_StopTimeEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripUpdate_StopTimeEvent::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void TripUpdate_StopTimeEvent::Swap(TripUpdate_StopTimeEvent* other) {
  if (other != this) {
    std::swap(delay_, other->delay_);
    std::swap(time_, other->time_);
    std::swap(uncertainty_, other->uncertainty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::std::string TripUpdate_StopTimeEvent::GetTypeName() const {
  return "transit_realtime.TripUpdate.StopTimeEvent";
}


// -------------------------------------------------------------------

bool TripUpdate_StopTimeUpdate_ScheduleRelationship_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TripUpdate_StopTimeUpdate_ScheduleRelationship TripUpdate_StopTimeUpdate::SCHEDULED;
const TripUpdate_StopTimeUpdate_ScheduleRelationship TripUpdate_StopTimeUpdate::SKIPPED;
const TripUpdate_StopTimeUpdate_ScheduleRelationship TripUpdate_StopTimeUpdate::NO_DATA;
const TripUpdate_StopTimeUpdate_ScheduleRelationship TripUpdate_StopTimeUpdate::ScheduleRelationship_MIN;
const TripUpdate_StopTimeUpdate_ScheduleRelationship TripUpdate_StopTimeUpdate::ScheduleRelationship_MAX;
const int TripUpdate_StopTimeUpdate::ScheduleRelationship_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TripUpdate_StopTimeUpdate::kStopSequenceFieldNumber;
const int TripUpdate_StopTimeUpdate::kStopIdFieldNumber;
const int TripUpdate_StopTimeUpdate::kArrivalFieldNumber;
const int TripUpdate_StopTimeUpdate::kDepartureFieldNumber;
const int TripUpdate_StopTimeUpdate::kScheduleRelationshipFieldNumber;
#endif  // !_MSC_VER

TripUpdate_StopTimeUpdate::TripUpdate_StopTimeUpdate()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TripUpdate_StopTimeUpdate::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  arrival_ = const_cast< ::transit_realtime::TripUpdate_StopTimeEvent*>(
      ::transit_realtime::TripUpdate_StopTimeEvent::internal_default_instance());
#else
  arrival_ = const_cast< ::transit_realtime::TripUpdate_StopTimeEvent*>(&::transit_realtime::TripUpdate_StopTimeEvent::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  departure_ = const_cast< ::transit_realtime::TripUpdate_StopTimeEvent*>(
      ::transit_realtime::TripUpdate_StopTimeEvent::internal_default_instance());
#else
  departure_ = const_cast< ::transit_realtime::TripUpdate_StopTimeEvent*>(&::transit_realtime::TripUpdate_StopTimeEvent::default_instance());
#endif
}

TripUpdate_StopTimeUpdate::TripUpdate_StopTimeUpdate(const TripUpdate_StopTimeUpdate& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TripUpdate_StopTimeUpdate::SharedCtor() {
  _cached_size_ = 0;
  stop_sequence_ = 0u;
  stop_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  arrival_ = NULL;
  departure_ = NULL;
  schedule_relationship_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TripUpdate_StopTimeUpdate::~TripUpdate_StopTimeUpdate() {
  SharedDtor();
}

void TripUpdate_StopTimeUpdate::SharedDtor() {
  if (stop_id_ != &::google::protobuf::internal::kEmptyString) {
    delete stop_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete arrival_;
    delete departure_;
  }
}

void TripUpdate_StopTimeUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TripUpdate_StopTimeUpdate& TripUpdate_StopTimeUpdate::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_gtfs_2drealtime_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_gtfs_2drealtime_2eproto();
#endif
  return *default_instance_;
}

TripUpdate_StopTimeUpdate* TripUpdate_StopTimeUpdate::default_instance_ = NULL;

TripUpdate_StopTimeUpdate* TripUpdate_StopTimeUpdate::New() const {
  return new TripUpdate_StopTimeUpdate;
}

void TripUpdate_StopTimeUpdate::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stop_sequence_ = 0u;
    if (has_stop_id()) {
      if (stop_id_ != &::google::protobuf::internal::kEmptyString) {
        stop_id_->clear();
      }
    }
    if (has_arrival()) {
      if (arrival_ != NULL) arrival_->::transit_realtime::TripUpdate_StopTimeEvent::Clear();
    }
    if (has_departure()) {
      if (departure_ != NULL) departure_->::transit_realtime::TripUpdate_StopTimeEvent::Clear();
    }
    schedule_relationship_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TripUpdate_StopTimeUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stop_sequence = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stop_sequence_)));
          set_has_stop_sequence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_arrival;
        break;
      }

      // optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arrival:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arrival()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_departure;
        break;
      }

      // optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_departure:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_departure()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stop_id;
        break;
      }

      // optional string stop_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stop_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stop_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_schedule_relationship;
        break;
      }

      // optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship schedule_relationship = 5 [default = SCHEDULED];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_schedule_relationship:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::transit_realtime::TripUpdate_StopTimeUpdate_ScheduleRelationship_IsValid(value)) {
            set_schedule_relationship(static_cast< ::transit_realtime::TripUpdate_StopTimeUpdate_ScheduleRelationship >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((8000u <= tag && tag < 16000u)) {
        #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
          DO_(_extensions_.ParseField(tag, input, &default_instance()));
        #else
          DO_(_extensions_.ParseField(tag, input, default_instance_));
        #endif
          continue;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TripUpdate_StopTimeUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 stop_sequence = 1;
  if (has_stop_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stop_sequence(), output);
  }

  // optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;
  if (has_arrival()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->arrival(), output);
  }

  // optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;
  if (has_departure()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->departure(), output);
  }

  // optional string stop_id = 4;
  if (has_stop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->stop_id(), output);
  }

  // optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship schedule_relationship = 5 [default = SCHEDULED];
  if (has_schedule_relationship()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->schedule_relationship(), output);
  }

  // Extension range [1000, 2000)
  _extensions_.SerializeWithCachedSizes(
      1000, 2000, output);

}

int TripUpdate_StopTimeUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 stop_sequence = 1;
    if (has_stop_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stop_sequence());
    }

    // optional string stop_id = 4;
    if (has_stop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stop_id());
    }

    // optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;
    if (has_arrival()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arrival());
    }

    // optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;
    if (has_departure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->departure());
    }

    // optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship schedule_relationship = 5 [default = SCHEDULED];
    if (has_schedule_relationship()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->schedule_relationship());
    }

  }
  total_size += _extensions_.ByteSize();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TripUpdate_StopTimeUpdate::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TripUpdate_StopTimeUpdate*>(&from));
}

void TripUpdate_StopTimeUpdate::MergeFrom(const TripUpdate_StopTimeUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stop_sequence()) {
      set_stop_sequence(from.stop_sequence());
    }
    if (from.has_stop_id()) {
      set_stop_id(from.stop_id());
    }
    if (from.has_arrival()) {
      mutable_arrival()->::transit_realtime::TripUpdate_StopTimeEvent::MergeFrom(from.arrival());
    }
    if (from.has_departure()) {
      mutable_departure()->::transit_realtime::TripUpdate_StopTimeEvent::MergeFrom(from.departure());
    }
    if (from.has_schedule_relationship()) {
      set_schedule_relationship(from.schedule_relationship());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
}

void TripUpdate_StopTimeUpdate::CopyFrom(const TripUpdate_StopTimeUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripUpdate_StopTimeUpdate::IsInitialized() const {

  if (has_arrival()) {
    if (!this->arrival().IsInitialized()) return false;
  }
  if (has_departure()) {
    if (!this->departure().IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void TripUpdate_StopTimeUpdate::Swap(TripUpdate_StopTimeUpdate* other) {
  if (other != this) {
    std::swap(stop_sequence_, other->stop_sequence_);
    std::swap(stop_id_, other->stop_id_);
    std::swap(arrival_, other->arrival_);
    std::swap(departure_, other->departure_);
    std::swap(schedule_relationship_, other->schedule_relationship_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::std::string TripUpdate_StopTimeUpdate::GetTypeName() const {
  return "transit_realtime.TripUpdate.StopTimeUpdate";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TripUpdate::kTripFieldNumber;
const int TripUpdate::kVehicleFieldNumber;
const int TripUpdate::kStopTimeUpdateFieldNumber;
const int TripUpdate::kTimestampFieldNumber;
#endif  // !_MSC_VER

TripUpdate::TripUpdate()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TripUpdate::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  trip_ = const_cast< ::transit_realtime::TripDescriptor*>(
      ::transit_realtime::TripDescriptor::internal_default_instance());
#else
  trip_ = const_cast< ::transit_realtime::TripDescriptor*>(&::transit_realtime::TripDescriptor::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  vehicle_ = const_cast< ::transit_realtime::VehicleDescriptor*>(
      ::transit_realtime::VehicleDescriptor::internal_default_instance());
#else
  vehicle_ = const_cast< ::transit_realtime::VehicleDescriptor*>(&::transit_realtime::VehicleDescriptor::default_instance());
#endif
}

TripUpdate::TripUpdate(const TripUpdate& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TripUpdate::SharedCtor() {
  _cached_size_ = 0;
  trip_ = NULL;
  vehicle_ = NULL;
  timestamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TripUpdate::~TripUpdate() {
  SharedDtor();
}

void TripUpdate::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete trip_;
    delete vehicle_;
  }
}

void TripUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TripUpdate& TripUpdate::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_gtfs_2drealtime_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_gtfs_2drealtime_2eproto();
#endif
  return *default_instance_;
}

TripUpdate* TripUpdate::default_instance_ = NULL;

TripUpdate* TripUpdate::New() const {
  return new TripUpdate;
}

void TripUpdate::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_trip()) {
      if (trip_ != NULL) trip_->::transit_realtime::TripDescriptor::Clear();
    }
    if (has_vehicle()) {
      if (vehicle_ != NULL) vehicle_->::transit_realtime::VehicleDescriptor::Clear();
    }
    timestamp_ = GOOGLE_ULONGLONG(0);
  }
  stop_time_update_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TripUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .transit_realtime.TripDescriptor trip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stop_time_update;
        break;
      }

      // repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stop_time_update:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stop_time_update()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stop_time_update;
        if (input->ExpectTag(26)) goto parse_vehicle;
        break;
      }

      // optional .transit_realtime.VehicleDescriptor vehicle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vehicle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vehicle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_timestamp;
        break;
      }

      // optional uint64 timestamp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((8000u <= tag && tag < 16000u)) {
        #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
          DO_(_extensions_.ParseField(tag, input, &default_instance()));
        #else
          DO_(_extensions_.ParseField(tag, input, default_instance_));
        #endif
          continue;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TripUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .transit_realtime.TripDescriptor trip = 1;
  if (has_trip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->trip(), output);
  }

  // repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;
  for (int i = 0; i < this->stop_time_update_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->stop_time_update(i), output);
  }

  // optional .transit_realtime.VehicleDescriptor vehicle = 3;
  if (has_vehicle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->vehicle(), output);
  }

  // optional uint64 timestamp = 4;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->timestamp(), output);
  }

  // Extension range [1000, 2000)
  _extensions_.SerializeWithCachedSizes(
      1000, 2000, output);

}

int TripUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .transit_realtime.TripDescriptor trip = 1;
    if (has_trip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trip());
    }

    // optional .transit_realtime.VehicleDescriptor vehicle = 3;
    if (has_vehicle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vehicle());
    }

    // optional uint64 timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

  }
  // repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;
  total_size += 1 * this->stop_time_update_size();
  for (int i = 0; i < this->stop_time_update_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stop_time_update(i));
  }

  total_size += _extensions_.ByteSize();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TripUpdate::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TripUpdate*>(&from));
}

void TripUpdate::MergeFrom(const TripUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  stop_time_update_.MergeFrom(from.stop_time_update_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trip()) {
      mutable_trip()->::transit_realtime::TripDescriptor::MergeFrom(from.trip());
    }
    if (from.has_vehicle()) {
      mutable_vehicle()->::transit_realtime::VehicleDescriptor::MergeFrom(from.vehicle());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
}

void TripUpdate::CopyFrom(const TripUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_trip()) {
    if (!this->trip().IsInitialized()) return false;
  }
  if (has_vehicle()) {
    if (!this->vehicle().IsInitialized()) return false;
  }
  for (int i = 0; i < stop_time_update_size(); i++) {
    if (!this->stop_time_update(i).IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void TripUpdate::Swap(TripUpdate* other) {
  if (other != this) {
    std::swap(trip_, other->trip_);
    std::swap(vehicle_, other->vehicle_);
    stop_time_update_.Swap(&other->stop_time_update_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::std::string TripUpdate::GetTypeName() const {
  return "transit_realtime.TripUpdate";
}


// ===================================================================

bool VehiclePosition_VehicleStopStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const VehiclePosition_VehicleStopStatus VehiclePosition::INCOMING_AT;
const VehiclePosition_VehicleStopStatus VehiclePosition::STOPPED_AT;
const VehiclePosition_VehicleStopStatus VehiclePosition::IN_TRANSIT_TO;
const VehiclePosition_VehicleStopStatus VehiclePosition::VehicleStopStatus_MIN;
const VehiclePosition_VehicleStopStatus VehiclePosition::VehicleStopStatus_MAX;
const int VehiclePosition::VehicleStopStatus_ARRAYSIZE;
#endif  // _MSC_VER
bool VehiclePosition_CongestionLevel_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const VehiclePosition_CongestionLevel VehiclePosition::UNKNOWN_CONGESTION_LEVEL;
const VehiclePosition_CongestionLevel VehiclePosition::RUNNING_SMOOTHLY;
const VehiclePosition_CongestionLevel VehiclePosition::STOP_AND_GO;
const VehiclePosition_CongestionLevel VehiclePosition::CONGESTION;
const VehiclePosition_CongestionLevel VehiclePosition::SEVERE_CONGESTION;
const VehiclePosition_CongestionLevel VehiclePosition::CongestionLevel_MIN;
const VehiclePosition_CongestionLevel VehiclePosition::CongestionLevel_MAX;
const int VehiclePosition::CongestionLevel_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int VehiclePosition::kTripFieldNumber;
const int VehiclePosition::kVehicleFieldNumber;
const int VehiclePosition::kPositionFieldNumber;
const int VehiclePosition::kCurrentStopSequenceFieldNumber;
const int VehiclePosition::kStopIdFieldNumber;
const int VehiclePosition::kCurrentStatusFieldNumber;
const int VehiclePosition::kTimestampFieldNumber;
const int VehiclePosition::kCongestionLevelFieldNumber;
#endif  // !_MSC_VER

VehiclePosition::VehiclePosition()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void VehiclePosition::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  trip_ = const_cast< ::transit_realtime::TripDescriptor*>(
      ::transit_realtime::TripDescriptor::internal_default_instance());
#else
  trip_ = const_cast< ::transit_realtime::TripDescriptor*>(&::transit_realtime::TripDescriptor::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  vehicle_ = const_cast< ::transit_realtime::VehicleDescriptor*>(
      ::transit_realtime::VehicleDescriptor::internal_default_instance());
#else
  vehicle_ = const_cast< ::transit_realtime::VehicleDescriptor*>(&::transit_realtime::VehicleDescriptor::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  position_ = const_cast< ::transit_realtime::Position*>(
      ::transit_realtime::Position::internal_default_instance());
#else
  position_ = const_cast< ::transit_realtime::Position*>(&::transit_realtime::Position::default_instance());
#endif
}

VehiclePosition::VehiclePosition(const VehiclePosition& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void VehiclePosition::SharedCtor() {
  _cached_size_ = 0;
  trip_ = NULL;
  vehicle_ = NULL;
  position_ = NULL;
  current_stop_sequence_ = 0u;
  stop_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  current_status_ = 2;
  timestamp_ = GOOGLE_ULONGLONG(0);
  congestion_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VehiclePosition::~VehiclePosition() {
  SharedDtor();
}

void VehiclePosition::SharedDtor() {
  if (stop_id_ != &::google::protobuf::internal::kEmptyString) {
    delete stop_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete trip_;
    delete vehicle_;
    delete position_;
  }
}

void VehiclePosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VehiclePosition& VehiclePosition::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_gtfs_2drealtime_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_gtfs_2drealtime_2eproto();
#endif
  return *default_instance_;
}

VehiclePosition* VehiclePosition::default_instance_ = NULL;

VehiclePosition* VehiclePosition::New() const {
  return new VehiclePosition;
}

void VehiclePosition::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_trip()) {
      if (trip_ != NULL) trip_->::transit_realtime::TripDescriptor::Clear();
    }
    if (has_vehicle()) {
      if (vehicle_ != NULL) vehicle_->::transit_realtime::VehicleDescriptor::Clear();
    }
    if (has_position()) {
      if (position_ != NULL) position_->::transit_realtime::Position::Clear();
    }
    current_stop_sequence_ = 0u;
    if (has_stop_id()) {
      if (stop_id_ != &::google::protobuf::internal::kEmptyString) {
        stop_id_->clear();
      }
    }
    current_status_ = 2;
    timestamp_ = GOOGLE_ULONGLONG(0);
    congestion_level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool VehiclePosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .transit_realtime.TripDescriptor trip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }

      // optional .transit_realtime.Position position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_current_stop_sequence;
        break;
      }

      // optional uint32 current_stop_sequence = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_stop_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_stop_sequence_)));
          set_has_current_stop_sequence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_current_status;
        break;
      }

      // optional .transit_realtime.VehiclePosition.VehicleStopStatus current_status = 4 [default = IN_TRANSIT_TO];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::transit_realtime::VehiclePosition_VehicleStopStatus_IsValid(value)) {
            set_current_status(static_cast< ::transit_realtime::VehiclePosition_VehicleStopStatus >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_timestamp;
        break;
      }

      // optional uint64 timestamp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_congestion_level;
        break;
      }

      // optional .transit_realtime.VehiclePosition.CongestionLevel congestion_level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_congestion_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::transit_realtime::VehiclePosition_CongestionLevel_IsValid(value)) {
            set_congestion_level(static_cast< ::transit_realtime::VehiclePosition_CongestionLevel >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_stop_id;
        break;
      }

      // optional string stop_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stop_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stop_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_vehicle;
        break;
      }

      // optional .transit_realtime.VehicleDescriptor vehicle = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vehicle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vehicle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((8000u <= tag && tag < 16000u)) {
        #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
          DO_(_extensions_.ParseField(tag, input, &default_instance()));
        #else
          DO_(_extensions_.ParseField(tag, input, default_instance_));
        #endif
          continue;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VehiclePosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .transit_realtime.TripDescriptor trip = 1;
  if (has_trip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->trip(), output);
  }

  // optional .transit_realtime.Position position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->position(), output);
  }

  // optional uint32 current_stop_sequence = 3;
  if (has_current_stop_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->current_stop_sequence(), output);
  }

  // optional .transit_realtime.VehiclePosition.VehicleStopStatus current_status = 4 [default = IN_TRANSIT_TO];
  if (has_current_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->current_status(), output);
  }

  // optional uint64 timestamp = 5;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->timestamp(), output);
  }

  // optional .transit_realtime.VehiclePosition.CongestionLevel congestion_level = 6;
  if (has_congestion_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->congestion_level(), output);
  }

  // optional string stop_id = 7;
  if (has_stop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->stop_id(), output);
  }

  // optional .transit_realtime.VehicleDescriptor vehicle = 8;
  if (has_vehicle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->vehicle(), output);
  }

  // Extension range [1000, 2000)
  _extensions_.SerializeWithCachedSizes(
      1000, 2000, output);

}

int VehiclePosition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .transit_realtime.TripDescriptor trip = 1;
    if (has_trip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trip());
    }

    // optional .transit_realtime.VehicleDescriptor vehicle = 8;
    if (has_vehicle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vehicle());
    }

    // optional .transit_realtime.Position position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // optional uint32 current_stop_sequence = 3;
    if (has_current_stop_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_stop_sequence());
    }

    // optional string stop_id = 7;
    if (has_stop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stop_id());
    }

    // optional .transit_realtime.VehiclePosition.VehicleStopStatus current_status = 4 [default = IN_TRANSIT_TO];
    if (has_current_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->current_status());
    }

    // optional uint64 timestamp = 5;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional .transit_realtime.VehiclePosition.CongestionLevel congestion_level = 6;
    if (has_congestion_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->congestion_level());
    }

  }
  total_size += _extensions_.ByteSize();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehiclePosition::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VehiclePosition*>(&from));
}

void VehiclePosition::MergeFrom(const VehiclePosition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trip()) {
      mutable_trip()->::transit_realtime::TripDescriptor::MergeFrom(from.trip());
    }
    if (from.has_vehicle()) {
      mutable_vehicle()->::transit_realtime::VehicleDescriptor::MergeFrom(from.vehicle());
    }
    if (from.has_position()) {
      mutable_position()->::transit_realtime::Position::MergeFrom(from.position());
    }
    if (from.has_current_stop_sequence()) {
      set_current_stop_sequence(from.current_stop_sequence());
    }
    if (from.has_stop_id()) {
      set_stop_id(from.stop_id());
    }
    if (from.has_current_status()) {
      set_current_status(from.current_status());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_congestion_level()) {
      set_congestion_level(from.congestion_level());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
}

void VehiclePosition::CopyFrom(const VehiclePosition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehiclePosition::IsInitialized() const {

  if (has_trip()) {
    if (!this->trip().IsInitialized()) return false;
  }
  if (has_vehicle()) {
    if (!this->vehicle().IsInitialized()) return false;
  }
  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void VehiclePosition::Swap(VehiclePosition* other) {
  if (other != this) {
    std::swap(trip_, other->trip_);
    std::swap(vehicle_, other->vehicle_);
    std::swap(position_, other->position_);
    std::swap(current_stop_sequence_, other->current_stop_sequence_);
    std::swap(stop_id_, other->stop_id_);
    std::swap(current_status_, other->current_status_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(congestion_level_, other->congestion_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::std::string VehiclePosition::GetTypeName() const {
  return "transit_realtime.VehiclePosition";
}


// ===================================================================

bool Alert_Cause_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Alert_Cause Alert::UNKNOWN_CAUSE;
const Alert_Cause Alert::OTHER_CAUSE;
const Alert_Cause Alert::TECHNICAL_PROBLEM;
const Alert_Cause Alert::STRIKE;
const Alert_Cause Alert::DEMONSTRATION;
const Alert_Cause Alert::ACCIDENT;
const Alert_Cause Alert::HOLIDAY;
const Alert_Cause Alert::WEATHER;
const Alert_Cause Alert::MAINTENANCE;
const Alert_Cause Alert::CONSTRUCTION;
const Alert_Cause Alert::POLICE_ACTIVITY;
const Alert_Cause Alert::MEDICAL_EMERGENCY;
const Alert_Cause Alert::Cause_MIN;
const Alert_Cause Alert::Cause_MAX;
const int Alert::Cause_ARRAYSIZE;
#endif  // _MSC_VER
bool Alert_Effect_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Alert_Effect Alert::NO_SERVICE;
const Alert_Effect Alert::REDUCED_SERVICE;
const Alert_Effect Alert::SIGNIFICANT_DELAYS;
const Alert_Effect Alert::DETOUR;
const Alert_Effect Alert::ADDITIONAL_SERVICE;
const Alert_Effect Alert::MODIFIED_SERVICE;
const Alert_Effect Alert::OTHER_EFFECT;
const Alert_Effect Alert::UNKNOWN_EFFECT;
const Alert_Effect Alert::STOP_MOVED;
const Alert_Effect Alert::Effect_MIN;
const Alert_Effect Alert::Effect_MAX;
const int Alert::Effect_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Alert::kActivePeriodFieldNumber;
const int Alert::kInformedEntityFieldNumber;
const int Alert::kCauseFieldNumber;
const int Alert::kEffectFieldNumber;
const int Alert::kUrlFieldNumber;
const int Alert::kHeaderTextFieldNumber;
const int Alert::kDescriptionTextFieldNumber;
#endif  // !_MSC_VER

Alert::Alert()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Alert::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  url_ = const_cast< ::transit_realtime::TranslatedString*>(
      ::transit_realtime::TranslatedString::internal_default_instance());
#else
  url_ = const_cast< ::transit_realtime::TranslatedString*>(&::transit_realtime::TranslatedString::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  header_text_ = const_cast< ::transit_realtime::TranslatedString*>(
      ::transit_realtime::TranslatedString::internal_default_instance());
#else
  header_text_ = const_cast< ::transit_realtime::TranslatedString*>(&::transit_realtime::TranslatedString::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  description_text_ = const_cast< ::transit_realtime::TranslatedString*>(
      ::transit_realtime::TranslatedString::internal_default_instance());
#else
  description_text_ = const_cast< ::transit_realtime::TranslatedString*>(&::transit_realtime::TranslatedString::default_instance());
#endif
}

Alert::Alert(const Alert& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Alert::SharedCtor() {
  _cached_size_ = 0;
  cause_ = 1;
  effect_ = 8;
  url_ = NULL;
  header_text_ = NULL;
  description_text_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Alert::~Alert() {
  SharedDtor();
}

void Alert::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete url_;
    delete header_text_;
    delete description_text_;
  }
}

void Alert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Alert& Alert::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_gtfs_2drealtime_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_gtfs_2drealtime_2eproto();
#endif
  return *default_instance_;
}

Alert* Alert::default_instance_ = NULL;

Alert* Alert::New() const {
  return new Alert;
}

void Alert::Clear() {
  _extensions_.Clear();
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    cause_ = 1;
    effect_ = 8;
    if (has_url()) {
      if (url_ != NULL) url_->::transit_realtime::TranslatedString::Clear();
    }
    if (has_header_text()) {
      if (header_text_ != NULL) header_text_->::transit_realtime::TranslatedString::Clear();
    }
    if (has_description_text()) {
      if (description_text_ != NULL) description_text_->::transit_realtime::TranslatedString::Clear();
    }
  }
  active_period_.Clear();
  informed_entity_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Alert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .transit_realtime.TimeRange active_period = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_active_period:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_active_period()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_active_period;
        if (input->ExpectTag(42)) goto parse_informed_entity;
        break;
      }

      // repeated .transit_realtime.EntitySelector informed_entity = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_informed_entity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_informed_entity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_informed_entity;
        if (input->ExpectTag(48)) goto parse_cause;
        break;
      }

      // optional .transit_realtime.Alert.Cause cause = 6 [default = UNKNOWN_CAUSE];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cause:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::transit_realtime::Alert_Cause_IsValid(value)) {
            set_cause(static_cast< ::transit_realtime::Alert_Cause >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_effect;
        break;
      }

      // optional .transit_realtime.Alert.Effect effect = 7 [default = UNKNOWN_EFFECT];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::transit_realtime::Alert_Effect_IsValid(value)) {
            set_effect(static_cast< ::transit_realtime::Alert_Effect >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_url;
        break;
      }

      // optional .transit_realtime.TranslatedString url = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_header_text;
        break;
      }

      // optional .transit_realtime.TranslatedString header_text = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_description_text;
        break;
      }

      // optional .transit_realtime.TranslatedString description_text = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_description_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((8000u <= tag && tag < 16000u)) {
        #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
          DO_(_extensions_.ParseField(tag, input, &default_instance()));
        #else
          DO_(_extensions_.ParseField(tag, input, default_instance_));
        #endif
          continue;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Alert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .transit_realtime.TimeRange active_period = 1;
  for (int i = 0; i < this->active_period_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->active_period(i), output);
  }

  // repeated .transit_realtime.EntitySelector informed_entity = 5;
  for (int i = 0; i < this->informed_entity_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->informed_entity(i), output);
  }

  // optional .transit_realtime.Alert.Cause cause = 6 [default = UNKNOWN_CAUSE];
  if (has_cause()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->cause(), output);
  }

  // optional .transit_realtime.Alert.Effect effect = 7 [default = UNKNOWN_EFFECT];
  if (has_effect()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->effect(), output);
  }

  // optional .transit_realtime.TranslatedString url = 8;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->url(), output);
  }

  // optional .transit_realtime.TranslatedString header_text = 10;
  if (has_header_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->header_text(), output);
  }

  // optional .transit_realtime.TranslatedString description_text = 11;
  if (has_description_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->description_text(), output);
  }

  // Extension range [1000, 2000)
  _extensions_.SerializeWithCachedSizes(
      1000, 2000, output);

}

int Alert::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional .transit_realtime.Alert.Cause cause = 6 [default = UNKNOWN_CAUSE];
    if (has_cause()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cause());
    }

    // optional .transit_realtime.Alert.Effect effect = 7 [default = UNKNOWN_EFFECT];
    if (has_effect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->effect());
    }

    // optional .transit_realtime.TranslatedString url = 8;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->url());
    }

    // optional .transit_realtime.TranslatedString header_text = 10;
    if (has_header_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header_text());
    }

    // optional .transit_realtime.TranslatedString description_text = 11;
    if (has_description_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->description_text());
    }

  }
  // repeated .transit_realtime.TimeRange active_period = 1;
  total_size += 1 * this->active_period_size();
  for (int i = 0; i < this->active_period_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->active_period(i));
  }

  // repeated .transit_realtime.EntitySelector informed_entity = 5;
  total_size += 1 * this->informed_entity_size();
  for (int i = 0; i < this->informed_entity_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->informed_entity(i));
  }

  total_size += _extensions_.ByteSize();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Alert::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Alert*>(&from));
}

void Alert::MergeFrom(const Alert& from) {
  GOOGLE_CHECK_NE(&from, this);
  active_period_.MergeFrom(from.active_period_);
  informed_entity_.MergeFrom(from.informed_entity_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_cause()) {
      set_cause(from.cause());
    }
    if (from.has_effect()) {
      set_effect(from.effect());
    }
    if (from.has_url()) {
      mutable_url()->::transit_realtime::TranslatedString::MergeFrom(from.url());
    }
    if (from.has_header_text()) {
      mutable_header_text()->::transit_realtime::TranslatedString::MergeFrom(from.header_text());
    }
    if (from.has_description_text()) {
      mutable_description_text()->::transit_realtime::TranslatedString::MergeFrom(from.description_text());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
}

void Alert::CopyFrom(const Alert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Alert::IsInitialized() const {

  for (int i = 0; i < informed_entity_size(); i++) {
    if (!this->informed_entity(i).IsInitialized()) return false;
  }
  if (has_url()) {
    if (!this->url().IsInitialized()) return false;
  }
  if (has_header_text()) {
    if (!this->header_text().IsInitialized()) return false;
  }
  if (has_description_text()) {
    if (!this->description_text().IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void Alert::Swap(Alert* other) {
  if (other != this) {
    active_period_.Swap(&other->active_period_);
    informed_entity_.Swap(&other->informed_entity_);
    std::swap(cause_, other->cause_);
    std::swap(effect_, other->effect_);
    std::swap(url_, other->url_);
    std::swap(header_text_, other->header_text_);
    std::swap(description_text_, other->description_text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::std::string Alert::GetTypeName() const {
  return "transit_realtime.Alert";
}


// ===================================================================

#ifndef _MSC_VER
const int TimeRange::kStartFieldNumber;
const int TimeRange::kEndFieldNumber;
#endif  // !_MSC_VER

TimeRange::TimeRange()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TimeRange::InitAsDefaultInstance() {
}

TimeRange::TimeRange(const TimeRange& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TimeRange::SharedCtor() {
  _cached_size_ = 0;
  start_ = GOOGLE_ULONGLONG(0);
  end_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeRange::~TimeRange() {
  SharedDtor();
}

void TimeRange::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TimeRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TimeRange& TimeRange::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_gtfs_2drealtime_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_gtfs_2drealtime_2eproto();
#endif
  return *default_instance_;
}

TimeRange* TimeRange::default_instance_ = NULL;

TimeRange* TimeRange::New() const {
  return new TimeRange;
}

void TimeRange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    start_ = GOOGLE_ULONGLONG(0);
    end_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TimeRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 start = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_end;
        break;
      }

      // optional uint64 end = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TimeRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 start = 1;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->start(), output);
  }

  // optional uint64 end = 2;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->end(), output);
  }

}

int TimeRange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 start = 1;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start());
    }

    // optional uint64 end = 2;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeRange::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TimeRange*>(&from));
}

void TimeRange::MergeFrom(const TimeRange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
  }
}

void TimeRange::CopyFrom(const TimeRange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeRange::IsInitialized() const {

  return true;
}

void TimeRange::Swap(TimeRange* other) {
  if (other != this) {
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TimeRange::GetTypeName() const {
  return "transit_realtime.TimeRange";
}


// ===================================================================

#ifndef _MSC_VER
const int Position::kLatitudeFieldNumber;
const int Position::kLongitudeFieldNumber;
const int Position::kBearingFieldNumber;
const int Position::kOdometerFieldNumber;
const int Position::kSpeedFieldNumber;
#endif  // !_MSC_VER

Position::Position()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Position::InitAsDefaultInstance() {
}

Position::Position(const Position& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Position::SharedCtor() {
  _cached_size_ = 0;
  latitude_ = 0;
  longitude_ = 0;
  bearing_ = 0;
  odometer_ = 0;
  speed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Position::~Position() {
  SharedDtor();
}

void Position::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Position::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Position& Position::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_gtfs_2drealtime_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_gtfs_2drealtime_2eproto();
#endif
  return *default_instance_;
}

Position* Position::default_instance_ = NULL;

Position* Position::New() const {
  return new Position;
}

void Position::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    latitude_ = 0;
    longitude_ = 0;
    bearing_ = 0;
    odometer_ = 0;
    speed_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float latitude = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_longitude;
        break;
      }

      // required float longitude = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_bearing;
        break;
      }

      // optional float bearing = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bearing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bearing_)));
          set_has_bearing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_odometer;
        break;
      }

      // optional double odometer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_odometer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &odometer_)));
          set_has_odometer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_speed;
        break;
      }

      // optional float speed = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((8000u <= tag && tag < 16000u)) {
        #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
          DO_(_extensions_.ParseField(tag, input, &default_instance()));
        #else
          DO_(_extensions_.ParseField(tag, input, default_instance_));
        #endif
          continue;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float latitude = 1;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->latitude(), output);
  }

  // required float longitude = 2;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->longitude(), output);
  }

  // optional float bearing = 3;
  if (has_bearing()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->bearing(), output);
  }

  // optional double odometer = 4;
  if (has_odometer()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->odometer(), output);
  }

  // optional float speed = 5;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->speed(), output);
  }

  // Extension range [1000, 2000)
  _extensions_.SerializeWithCachedSizes(
      1000, 2000, output);

}

int Position::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float latitude = 1;
    if (has_latitude()) {
      total_size += 1 + 4;
    }

    // required float longitude = 2;
    if (has_longitude()) {
      total_size += 1 + 4;
    }

    // optional float bearing = 3;
    if (has_bearing()) {
      total_size += 1 + 4;
    }

    // optional double odometer = 4;
    if (has_odometer()) {
      total_size += 1 + 8;
    }

    // optional float speed = 5;
    if (has_speed()) {
      total_size += 1 + 4;
    }

  }
  total_size += _extensions_.ByteSize();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Position::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Position*>(&from));
}

void Position::MergeFrom(const Position& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_bearing()) {
      set_bearing(from.bearing());
    }
    if (from.has_odometer()) {
      set_odometer(from.odometer());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
}

void Position::CopyFrom(const Position& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void Position::Swap(Position* other) {
  if (other != this) {
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(bearing_, other->bearing_);
    std::swap(odometer_, other->odometer_);
    std::swap(speed_, other->speed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::std::string Position::GetTypeName() const {
  return "transit_realtime.Position";
}


// ===================================================================

bool TripDescriptor_ScheduleRelationship_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TripDescriptor_ScheduleRelationship TripDescriptor::SCHEDULED;
const TripDescriptor_ScheduleRelationship TripDescriptor::ADDED;
const TripDescriptor_ScheduleRelationship TripDescriptor::UNSCHEDULED;
const TripDescriptor_ScheduleRelationship TripDescriptor::CANCELED;
const TripDescriptor_ScheduleRelationship TripDescriptor::REPLACEMENT;
const TripDescriptor_ScheduleRelationship TripDescriptor::ScheduleRelationship_MIN;
const TripDescriptor_ScheduleRelationship TripDescriptor::ScheduleRelationship_MAX;
const int TripDescriptor::ScheduleRelationship_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TripDescriptor::kTripIdFieldNumber;
const int TripDescriptor::kRouteIdFieldNumber;
const int TripDescriptor::kStartTimeFieldNumber;
const int TripDescriptor::kStartDateFieldNumber;
const int TripDescriptor::kScheduleRelationshipFieldNumber;
#endif  // !_MSC_VER

TripDescriptor::TripDescriptor()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TripDescriptor::InitAsDefaultInstance() {
}

TripDescriptor::TripDescriptor(const TripDescriptor& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TripDescriptor::SharedCtor() {
  _cached_size_ = 0;
  trip_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  route_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  start_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  schedule_relationship_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TripDescriptor::~TripDescriptor() {
  SharedDtor();
}

void TripDescriptor::SharedDtor() {
  if (trip_id_ != &::google::protobuf::internal::kEmptyString) {
    delete trip_id_;
  }
  if (route_id_ != &::google::protobuf::internal::kEmptyString) {
    delete route_id_;
  }
  if (start_time_ != &::google::protobuf::internal::kEmptyString) {
    delete start_time_;
  }
  if (start_date_ != &::google::protobuf::internal::kEmptyString) {
    delete start_date_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TripDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TripDescriptor& TripDescriptor::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_gtfs_2drealtime_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_gtfs_2drealtime_2eproto();
#endif
  return *default_instance_;
}

TripDescriptor* TripDescriptor::default_instance_ = NULL;

TripDescriptor* TripDescriptor::New() const {
  return new TripDescriptor;
}

void TripDescriptor::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_trip_id()) {
      if (trip_id_ != &::google::protobuf::internal::kEmptyString) {
        trip_id_->clear();
      }
    }
    if (has_route_id()) {
      if (route_id_ != &::google::protobuf::internal::kEmptyString) {
        route_id_->clear();
      }
    }
    if (has_start_time()) {
      if (start_time_ != &::google::protobuf::internal::kEmptyString) {
        start_time_->clear();
      }
    }
    if (has_start_date()) {
      if (start_date_ != &::google::protobuf::internal::kEmptyString) {
        start_date_->clear();
      }
    }
    schedule_relationship_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TripDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string trip_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trip_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_start_time;
        break;
      }

      // optional string start_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_start_date;
        break;
      }

      // optional string start_date = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_date()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_schedule_relationship;
        break;
      }

      // optional .transit_realtime.TripDescriptor.ScheduleRelationship schedule_relationship = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_schedule_relationship:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::transit_realtime::TripDescriptor_ScheduleRelationship_IsValid(value)) {
            set_schedule_relationship(static_cast< ::transit_realtime::TripDescriptor_ScheduleRelationship >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_route_id;
        break;
      }

      // optional string route_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_route_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_route_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((8000u <= tag && tag < 16000u)) {
        #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
          DO_(_extensions_.ParseField(tag, input, &default_instance()));
        #else
          DO_(_extensions_.ParseField(tag, input, default_instance_));
        #endif
          continue;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TripDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string trip_id = 1;
  if (has_trip_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->trip_id(), output);
  }

  // optional string start_time = 2;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->start_time(), output);
  }

  // optional string start_date = 3;
  if (has_start_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->start_date(), output);
  }

  // optional .transit_realtime.TripDescriptor.ScheduleRelationship schedule_relationship = 4;
  if (has_schedule_relationship()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->schedule_relationship(), output);
  }

  // optional string route_id = 5;
  if (has_route_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->route_id(), output);
  }

  // Extension range [1000, 2000)
  _extensions_.SerializeWithCachedSizes(
      1000, 2000, output);

}

int TripDescriptor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string trip_id = 1;
    if (has_trip_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trip_id());
    }

    // optional string route_id = 5;
    if (has_route_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->route_id());
    }

    // optional string start_time = 2;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->start_time());
    }

    // optional string start_date = 3;
    if (has_start_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->start_date());
    }

    // optional .transit_realtime.TripDescriptor.ScheduleRelationship schedule_relationship = 4;
    if (has_schedule_relationship()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->schedule_relationship());
    }

  }
  total_size += _extensions_.ByteSize();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TripDescriptor::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TripDescriptor*>(&from));
}

void TripDescriptor::MergeFrom(const TripDescriptor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trip_id()) {
      set_trip_id(from.trip_id());
    }
    if (from.has_route_id()) {
      set_route_id(from.route_id());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_start_date()) {
      set_start_date(from.start_date());
    }
    if (from.has_schedule_relationship()) {
      set_schedule_relationship(from.schedule_relationship());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
}

void TripDescriptor::CopyFrom(const TripDescriptor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripDescriptor::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void TripDescriptor::Swap(TripDescriptor* other) {
  if (other != this) {
    std::swap(trip_id_, other->trip_id_);
    std::swap(route_id_, other->route_id_);
    std::swap(start_time_, other->start_time_);
    std::swap(start_date_, other->start_date_);
    std::swap(schedule_relationship_, other->schedule_relationship_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::std::string TripDescriptor::GetTypeName() const {
  return "transit_realtime.TripDescriptor";
}


// ===================================================================

#ifndef _MSC_VER
const int VehicleDescriptor::kIdFieldNumber;
const int VehicleDescriptor::kLabelFieldNumber;
const int VehicleDescriptor::kLicensePlateFieldNumber;
#endif  // !_MSC_VER

VehicleDescriptor::VehicleDescriptor()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void VehicleDescriptor::InitAsDefaultInstance() {
}

VehicleDescriptor::VehicleDescriptor(const VehicleDescriptor& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void VehicleDescriptor::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  license_plate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VehicleDescriptor::~VehicleDescriptor() {
  SharedDtor();
}

void VehicleDescriptor::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (label_ != &::google::protobuf::internal::kEmptyString) {
    delete label_;
  }
  if (license_plate_ != &::google::protobuf::internal::kEmptyString) {
    delete license_plate_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void VehicleDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VehicleDescriptor& VehicleDescriptor::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_gtfs_2drealtime_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_gtfs_2drealtime_2eproto();
#endif
  return *default_instance_;
}

VehicleDescriptor* VehicleDescriptor::default_instance_ = NULL;

VehicleDescriptor* VehicleDescriptor::New() const {
  return new VehicleDescriptor;
}

void VehicleDescriptor::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_label()) {
      if (label_ != &::google::protobuf::internal::kEmptyString) {
        label_->clear();
      }
    }
    if (has_license_plate()) {
      if (license_plate_ != &::google::protobuf::internal::kEmptyString) {
        license_plate_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool VehicleDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_label;
        break;
      }

      // optional string label = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_license_plate;
        break;
      }

      // optional string license_plate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_license_plate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_license_plate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((8000u <= tag && tag < 16000u)) {
        #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
          DO_(_extensions_.ParseField(tag, input, &default_instance()));
        #else
          DO_(_extensions_.ParseField(tag, input, default_instance_));
        #endif
          continue;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VehicleDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional string label = 2;
  if (has_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->label(), output);
  }

  // optional string license_plate = 3;
  if (has_license_plate()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->license_plate(), output);
  }

  // Extension range [1000, 2000)
  _extensions_.SerializeWithCachedSizes(
      1000, 2000, output);

}

int VehicleDescriptor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string label = 2;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

    // optional string license_plate = 3;
    if (has_license_plate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->license_plate());
    }

  }
  total_size += _extensions_.ByteSize();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleDescriptor::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VehicleDescriptor*>(&from));
}

void VehicleDescriptor::MergeFrom(const VehicleDescriptor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
    if (from.has_license_plate()) {
      set_license_plate(from.license_plate());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
}

void VehicleDescriptor::CopyFrom(const VehicleDescriptor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleDescriptor::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void VehicleDescriptor::Swap(VehicleDescriptor* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(label_, other->label_);
    std::swap(license_plate_, other->license_plate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::std::string VehicleDescriptor::GetTypeName() const {
  return "transit_realtime.VehicleDescriptor";
}


// ===================================================================

#ifndef _MSC_VER
const int EntitySelector::kAgencyIdFieldNumber;
const int EntitySelector::kRouteIdFieldNumber;
const int EntitySelector::kRouteTypeFieldNumber;
const int EntitySelector::kTripFieldNumber;
const int EntitySelector::kStopIdFieldNumber;
#endif  // !_MSC_VER

EntitySelector::EntitySelector()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void EntitySelector::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  trip_ = const_cast< ::transit_realtime::TripDescriptor*>(
      ::transit_realtime::TripDescriptor::internal_default_instance());
#else
  trip_ = const_cast< ::transit_realtime::TripDescriptor*>(&::transit_realtime::TripDescriptor::default_instance());
#endif
}

EntitySelector::EntitySelector(const EntitySelector& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void EntitySelector::SharedCtor() {
  _cached_size_ = 0;
  agency_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  route_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  route_type_ = 0;
  trip_ = NULL;
  stop_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EntitySelector::~EntitySelector() {
  SharedDtor();
}

void EntitySelector::SharedDtor() {
  if (agency_id_ != &::google::protobuf::internal::kEmptyString) {
    delete agency_id_;
  }
  if (route_id_ != &::google::protobuf::internal::kEmptyString) {
    delete route_id_;
  }
  if (stop_id_ != &::google::protobuf::internal::kEmptyString) {
    delete stop_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete trip_;
  }
}

void EntitySelector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EntitySelector& EntitySelector::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_gtfs_2drealtime_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_gtfs_2drealtime_2eproto();
#endif
  return *default_instance_;
}

EntitySelector* EntitySelector::default_instance_ = NULL;

EntitySelector* EntitySelector::New() const {
  return new EntitySelector;
}

void EntitySelector::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_agency_id()) {
      if (agency_id_ != &::google::protobuf::internal::kEmptyString) {
        agency_id_->clear();
      }
    }
    if (has_route_id()) {
      if (route_id_ != &::google::protobuf::internal::kEmptyString) {
        route_id_->clear();
      }
    }
    route_type_ = 0;
    if (has_trip()) {
      if (trip_ != NULL) trip_->::transit_realtime::TripDescriptor::Clear();
    }
    if (has_stop_id()) {
      if (stop_id_ != &::google::protobuf::internal::kEmptyString) {
        stop_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool EntitySelector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string agency_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_agency_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_route_id;
        break;
      }

      // optional string route_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_route_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_route_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_route_type;
        break;
      }

      // optional int32 route_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_route_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &route_type_)));
          set_has_route_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_trip;
        break;
      }

      // optional .transit_realtime.TripDescriptor trip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_stop_id;
        break;
      }

      // optional string stop_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stop_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stop_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((8000u <= tag && tag < 16000u)) {
        #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
          DO_(_extensions_.ParseField(tag, input, &default_instance()));
        #else
          DO_(_extensions_.ParseField(tag, input, default_instance_));
        #endif
          continue;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EntitySelector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string agency_id = 1;
  if (has_agency_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->agency_id(), output);
  }

  // optional string route_id = 2;
  if (has_route_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->route_id(), output);
  }

  // optional int32 route_type = 3;
  if (has_route_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->route_type(), output);
  }

  // optional .transit_realtime.TripDescriptor trip = 4;
  if (has_trip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->trip(), output);
  }

  // optional string stop_id = 5;
  if (has_stop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->stop_id(), output);
  }

  // Extension range [1000, 2000)
  _extensions_.SerializeWithCachedSizes(
      1000, 2000, output);

}

int EntitySelector::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string agency_id = 1;
    if (has_agency_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->agency_id());
    }

    // optional string route_id = 2;
    if (has_route_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->route_id());
    }

    // optional int32 route_type = 3;
    if (has_route_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->route_type());
    }

    // optional .transit_realtime.TripDescriptor trip = 4;
    if (has_trip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trip());
    }

    // optional string stop_id = 5;
    if (has_stop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stop_id());
    }

  }
  total_size += _extensions_.ByteSize();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntitySelector::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EntitySelector*>(&from));
}

void EntitySelector::MergeFrom(const EntitySelector& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agency_id()) {
      set_agency_id(from.agency_id());
    }
    if (from.has_route_id()) {
      set_route_id(from.route_id());
    }
    if (from.has_route_type()) {
      set_route_type(from.route_type());
    }
    if (from.has_trip()) {
      mutable_trip()->::transit_realtime::TripDescriptor::MergeFrom(from.trip());
    }
    if (from.has_stop_id()) {
      set_stop_id(from.stop_id());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
}

void EntitySelector::CopyFrom(const EntitySelector& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntitySelector::IsInitialized() const {

  if (has_trip()) {
    if (!this->trip().IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void EntitySelector::Swap(EntitySelector* other) {
  if (other != this) {
    std::swap(agency_id_, other->agency_id_);
    std::swap(route_id_, other->route_id_);
    std::swap(route_type_, other->route_type_);
    std::swap(trip_, other->trip_);
    std::swap(stop_id_, other->stop_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::std::string EntitySelector::GetTypeName() const {
  return "transit_realtime.EntitySelector";
}


// ===================================================================

#ifndef _MSC_VER
const int TranslatedString_Translation::kTextFieldNumber;
const int TranslatedString_Translation::kLanguageFieldNumber;
#endif  // !_MSC_VER

TranslatedString_Translation::TranslatedString_Translation()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TranslatedString_Translation::InitAsDefaultInstance() {
}

TranslatedString_Translation::TranslatedString_Translation(const TranslatedString_Translation& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TranslatedString_Translation::SharedCtor() {
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TranslatedString_Translation::~TranslatedString_Translation() {
  SharedDtor();
}

void TranslatedString_Translation::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (language_ != &::google::protobuf::internal::kEmptyString) {
    delete language_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TranslatedString_Translation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TranslatedString_Translation& TranslatedString_Translation::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_gtfs_2drealtime_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_gtfs_2drealtime_2eproto();
#endif
  return *default_instance_;
}

TranslatedString_Translation* TranslatedString_Translation::default_instance_ = NULL;

TranslatedString_Translation* TranslatedString_Translation::New() const {
  return new TranslatedString_Translation;
}

void TranslatedString_Translation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    if (has_language()) {
      if (language_ != &::google::protobuf::internal::kEmptyString) {
        language_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TranslatedString_Translation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string text = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_language;
        break;
      }

      // optional string language = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TranslatedString_Translation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->text(), output);
  }

  // optional string language = 2;
  if (has_language()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->language(), output);
  }

}

int TranslatedString_Translation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional string language = 2;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TranslatedString_Translation::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TranslatedString_Translation*>(&from));
}

void TranslatedString_Translation::MergeFrom(const TranslatedString_Translation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_language()) {
      set_language(from.language());
    }
  }
}

void TranslatedString_Translation::CopyFrom(const TranslatedString_Translation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TranslatedString_Translation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TranslatedString_Translation::Swap(TranslatedString_Translation* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(language_, other->language_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TranslatedString_Translation::GetTypeName() const {
  return "transit_realtime.TranslatedString.Translation";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TranslatedString::kTranslationFieldNumber;
#endif  // !_MSC_VER

TranslatedString::TranslatedString()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TranslatedString::InitAsDefaultInstance() {
}

TranslatedString::TranslatedString(const TranslatedString& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TranslatedString::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TranslatedString::~TranslatedString() {
  SharedDtor();
}

void TranslatedString::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TranslatedString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TranslatedString& TranslatedString::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_gtfs_2drealtime_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_gtfs_2drealtime_2eproto();
#endif
  return *default_instance_;
}

TranslatedString* TranslatedString::default_instance_ = NULL;

TranslatedString* TranslatedString::New() const {
  return new TranslatedString;
}

void TranslatedString::Clear() {
  translation_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TranslatedString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .transit_realtime.TranslatedString.Translation translation = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_translation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_translation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_translation;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TranslatedString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .transit_realtime.TranslatedString.Translation translation = 1;
  for (int i = 0; i < this->translation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->translation(i), output);
  }

}

int TranslatedString::ByteSize() const {
  int total_size = 0;

  // repeated .transit_realtime.TranslatedString.Translation translation = 1;
  total_size += 1 * this->translation_size();
  for (int i = 0; i < this->translation_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->translation(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TranslatedString::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TranslatedString*>(&from));
}

void TranslatedString::MergeFrom(const TranslatedString& from) {
  GOOGLE_CHECK_NE(&from, this);
  translation_.MergeFrom(from.translation_);
}

void TranslatedString::CopyFrom(const TranslatedString& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TranslatedString::IsInitialized() const {

  for (int i = 0; i < translation_size(); i++) {
    if (!this->translation(i).IsInitialized()) return false;
  }
  return true;
}

void TranslatedString::Swap(TranslatedString* other) {
  if (other != this) {
    translation_.Swap(&other->translation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TranslatedString::GetTypeName() const {
  return "transit_realtime.TranslatedString";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace transit_realtime

// @@protoc_insertion_point(global_scope)
