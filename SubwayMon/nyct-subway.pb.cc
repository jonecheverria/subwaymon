// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nyct-subway.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "nyct-subway.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_nyct_2dsubway_2eproto() {
  delete TripReplacementPeriod::default_instance_;
  delete NyctFeedHeader::default_instance_;
  delete NyctTripDescriptor::default_instance_;
  delete NyctStopTimeUpdate::default_instance_;
}

void protobuf_AddDesc_nyct_2dsubway_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::transit_realtime::protobuf_AddDesc_gtfs_2drealtime_2eproto();
  TripReplacementPeriod::default_instance_ = new TripReplacementPeriod();
  NyctFeedHeader::default_instance_ = new NyctFeedHeader();
  NyctTripDescriptor::default_instance_ = new NyctTripDescriptor();
  NyctStopTimeUpdate::default_instance_ = new NyctStopTimeUpdate();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::transit_realtime::FeedHeader::default_instance(),
    1001, 11, false, false,
    &::NyctFeedHeader::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::transit_realtime::TripDescriptor::default_instance(),
    1001, 11, false, false,
    &::NyctTripDescriptor::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::transit_realtime::TripUpdate_StopTimeUpdate::default_instance(),
    1001, 11, false, false,
    &::NyctStopTimeUpdate::default_instance());
  TripReplacementPeriod::default_instance_->InitAsDefaultInstance();
  NyctFeedHeader::default_instance_->InitAsDefaultInstance();
  NyctTripDescriptor::default_instance_->InitAsDefaultInstance();
  NyctStopTimeUpdate::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_nyct_2dsubway_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_nyct_2dsubway_2eproto {
  StaticDescriptorInitializer_nyct_2dsubway_2eproto() {
    protobuf_AddDesc_nyct_2dsubway_2eproto();
  }
} static_descriptor_initializer_nyct_2dsubway_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TripReplacementPeriod::kRouteIdFieldNumber;
const int TripReplacementPeriod::kReplacementPeriodFieldNumber;
#endif  // !_MSC_VER

TripReplacementPeriod::TripReplacementPeriod()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TripReplacementPeriod::InitAsDefaultInstance() {
  replacement_period_ = const_cast< ::transit_realtime::TimeRange*>(&::transit_realtime::TimeRange::default_instance());
}

TripReplacementPeriod::TripReplacementPeriod(const TripReplacementPeriod& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TripReplacementPeriod::SharedCtor() {
  _cached_size_ = 0;
  route_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  replacement_period_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TripReplacementPeriod::~TripReplacementPeriod() {
  SharedDtor();
}

void TripReplacementPeriod::SharedDtor() {
  if (route_id_ != &::google::protobuf::internal::kEmptyString) {
    delete route_id_;
  }
  if (this != default_instance_) {
    delete replacement_period_;
  }
}

void TripReplacementPeriod::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TripReplacementPeriod& TripReplacementPeriod::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nyct_2dsubway_2eproto();
  return *default_instance_;
}

TripReplacementPeriod* TripReplacementPeriod::default_instance_ = NULL;

TripReplacementPeriod* TripReplacementPeriod::New() const {
  return new TripReplacementPeriod;
}

void TripReplacementPeriod::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_route_id()) {
      if (route_id_ != &::google::protobuf::internal::kEmptyString) {
        route_id_->clear();
      }
    }
    if (has_replacement_period()) {
      if (replacement_period_ != NULL) replacement_period_->::transit_realtime::TimeRange::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TripReplacementPeriod::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string route_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_route_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_replacement_period;
        break;
      }

      // optional .transit_realtime.TimeRange replacement_period = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_replacement_period:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_replacement_period()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TripReplacementPeriod::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string route_id = 1;
  if (has_route_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->route_id(), output);
  }

  // optional .transit_realtime.TimeRange replacement_period = 2;
  if (has_replacement_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->replacement_period(), output);
  }

}

int TripReplacementPeriod::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string route_id = 1;
    if (has_route_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->route_id());
    }

    // optional .transit_realtime.TimeRange replacement_period = 2;
    if (has_replacement_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->replacement_period());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TripReplacementPeriod::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TripReplacementPeriod*>(&from));
}

void TripReplacementPeriod::MergeFrom(const TripReplacementPeriod& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_route_id()) {
      set_route_id(from.route_id());
    }
    if (from.has_replacement_period()) {
      mutable_replacement_period()->::transit_realtime::TimeRange::MergeFrom(from.replacement_period());
    }
  }
}

void TripReplacementPeriod::CopyFrom(const TripReplacementPeriod& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripReplacementPeriod::IsInitialized() const {

  return true;
}

void TripReplacementPeriod::Swap(TripReplacementPeriod* other) {
  if (other != this) {
    std::swap(route_id_, other->route_id_);
    std::swap(replacement_period_, other->replacement_period_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TripReplacementPeriod::GetTypeName() const {
  return "TripReplacementPeriod";
}


// ===================================================================

#ifndef _MSC_VER
const int NyctFeedHeader::kNyctSubwayVersionFieldNumber;
const int NyctFeedHeader::kTripReplacementPeriodFieldNumber;
#endif  // !_MSC_VER

NyctFeedHeader::NyctFeedHeader()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NyctFeedHeader::InitAsDefaultInstance() {
}

NyctFeedHeader::NyctFeedHeader(const NyctFeedHeader& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NyctFeedHeader::SharedCtor() {
  _cached_size_ = 0;
  nyct_subway_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NyctFeedHeader::~NyctFeedHeader() {
  SharedDtor();
}

void NyctFeedHeader::SharedDtor() {
  if (nyct_subway_version_ != &::google::protobuf::internal::kEmptyString) {
    delete nyct_subway_version_;
  }
  if (this != default_instance_) {
  }
}

void NyctFeedHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NyctFeedHeader& NyctFeedHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nyct_2dsubway_2eproto();
  return *default_instance_;
}

NyctFeedHeader* NyctFeedHeader::default_instance_ = NULL;

NyctFeedHeader* NyctFeedHeader::New() const {
  return new NyctFeedHeader;
}

void NyctFeedHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_nyct_subway_version()) {
      if (nyct_subway_version_ != &::google::protobuf::internal::kEmptyString) {
        nyct_subway_version_->clear();
      }
    }
  }
  trip_replacement_period_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NyctFeedHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string nyct_subway_version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nyct_subway_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_trip_replacement_period;
        break;
      }

      // repeated .TripReplacementPeriod trip_replacement_period = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trip_replacement_period:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trip_replacement_period()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_trip_replacement_period;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NyctFeedHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string nyct_subway_version = 1;
  if (has_nyct_subway_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->nyct_subway_version(), output);
  }

  // repeated .TripReplacementPeriod trip_replacement_period = 2;
  for (int i = 0; i < this->trip_replacement_period_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->trip_replacement_period(i), output);
  }

}

int NyctFeedHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string nyct_subway_version = 1;
    if (has_nyct_subway_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nyct_subway_version());
    }

  }
  // repeated .TripReplacementPeriod trip_replacement_period = 2;
  total_size += 1 * this->trip_replacement_period_size();
  for (int i = 0; i < this->trip_replacement_period_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trip_replacement_period(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NyctFeedHeader::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NyctFeedHeader*>(&from));
}

void NyctFeedHeader::MergeFrom(const NyctFeedHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  trip_replacement_period_.MergeFrom(from.trip_replacement_period_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nyct_subway_version()) {
      set_nyct_subway_version(from.nyct_subway_version());
    }
  }
}

void NyctFeedHeader::CopyFrom(const NyctFeedHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NyctFeedHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NyctFeedHeader::Swap(NyctFeedHeader* other) {
  if (other != this) {
    std::swap(nyct_subway_version_, other->nyct_subway_version_);
    trip_replacement_period_.Swap(&other->trip_replacement_period_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NyctFeedHeader::GetTypeName() const {
  return "NyctFeedHeader";
}


// ===================================================================

bool NyctTripDescriptor_Direction_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NyctTripDescriptor_Direction NyctTripDescriptor::NORTH;
const NyctTripDescriptor_Direction NyctTripDescriptor::EAST;
const NyctTripDescriptor_Direction NyctTripDescriptor::SOUTH;
const NyctTripDescriptor_Direction NyctTripDescriptor::WEST;
const NyctTripDescriptor_Direction NyctTripDescriptor::Direction_MIN;
const NyctTripDescriptor_Direction NyctTripDescriptor::Direction_MAX;
const int NyctTripDescriptor::Direction_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NyctTripDescriptor::kTrainIdFieldNumber;
const int NyctTripDescriptor::kIsAssignedFieldNumber;
const int NyctTripDescriptor::kDirectionFieldNumber;
#endif  // !_MSC_VER

NyctTripDescriptor::NyctTripDescriptor()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NyctTripDescriptor::InitAsDefaultInstance() {
}

NyctTripDescriptor::NyctTripDescriptor(const NyctTripDescriptor& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NyctTripDescriptor::SharedCtor() {
  _cached_size_ = 0;
  train_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_assigned_ = false;
  direction_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NyctTripDescriptor::~NyctTripDescriptor() {
  SharedDtor();
}

void NyctTripDescriptor::SharedDtor() {
  if (train_id_ != &::google::protobuf::internal::kEmptyString) {
    delete train_id_;
  }
  if (this != default_instance_) {
  }
}

void NyctTripDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NyctTripDescriptor& NyctTripDescriptor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nyct_2dsubway_2eproto();
  return *default_instance_;
}

NyctTripDescriptor* NyctTripDescriptor::default_instance_ = NULL;

NyctTripDescriptor* NyctTripDescriptor::New() const {
  return new NyctTripDescriptor;
}

void NyctTripDescriptor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_train_id()) {
      if (train_id_ != &::google::protobuf::internal::kEmptyString) {
        train_id_->clear();
      }
    }
    is_assigned_ = false;
    direction_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NyctTripDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string train_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_train_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_assigned;
        break;
      }

      // optional bool is_assigned = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_assigned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_assigned_)));
          set_has_is_assigned();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_direction;
        break;
      }

      // optional .NyctTripDescriptor.Direction direction = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_direction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NyctTripDescriptor_Direction_IsValid(value)) {
            set_direction(static_cast< ::NyctTripDescriptor_Direction >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NyctTripDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string train_id = 1;
  if (has_train_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->train_id(), output);
  }

  // optional bool is_assigned = 2;
  if (has_is_assigned()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_assigned(), output);
  }

  // optional .NyctTripDescriptor.Direction direction = 3;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->direction(), output);
  }

}

int NyctTripDescriptor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string train_id = 1;
    if (has_train_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->train_id());
    }

    // optional bool is_assigned = 2;
    if (has_is_assigned()) {
      total_size += 1 + 1;
    }

    // optional .NyctTripDescriptor.Direction direction = 3;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NyctTripDescriptor::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NyctTripDescriptor*>(&from));
}

void NyctTripDescriptor::MergeFrom(const NyctTripDescriptor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_train_id()) {
      set_train_id(from.train_id());
    }
    if (from.has_is_assigned()) {
      set_is_assigned(from.is_assigned());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
  }
}

void NyctTripDescriptor::CopyFrom(const NyctTripDescriptor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NyctTripDescriptor::IsInitialized() const {

  return true;
}

void NyctTripDescriptor::Swap(NyctTripDescriptor* other) {
  if (other != this) {
    std::swap(train_id_, other->train_id_);
    std::swap(is_assigned_, other->is_assigned_);
    std::swap(direction_, other->direction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NyctTripDescriptor::GetTypeName() const {
  return "NyctTripDescriptor";
}


// ===================================================================

#ifndef _MSC_VER
const int NyctStopTimeUpdate::kScheduledTrackFieldNumber;
const int NyctStopTimeUpdate::kActualTrackFieldNumber;
#endif  // !_MSC_VER

NyctStopTimeUpdate::NyctStopTimeUpdate()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NyctStopTimeUpdate::InitAsDefaultInstance() {
}

NyctStopTimeUpdate::NyctStopTimeUpdate(const NyctStopTimeUpdate& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NyctStopTimeUpdate::SharedCtor() {
  _cached_size_ = 0;
  scheduled_track_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  actual_track_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NyctStopTimeUpdate::~NyctStopTimeUpdate() {
  SharedDtor();
}

void NyctStopTimeUpdate::SharedDtor() {
  if (scheduled_track_ != &::google::protobuf::internal::kEmptyString) {
    delete scheduled_track_;
  }
  if (actual_track_ != &::google::protobuf::internal::kEmptyString) {
    delete actual_track_;
  }
  if (this != default_instance_) {
  }
}

void NyctStopTimeUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NyctStopTimeUpdate& NyctStopTimeUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nyct_2dsubway_2eproto();
  return *default_instance_;
}

NyctStopTimeUpdate* NyctStopTimeUpdate::default_instance_ = NULL;

NyctStopTimeUpdate* NyctStopTimeUpdate::New() const {
  return new NyctStopTimeUpdate;
}

void NyctStopTimeUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_scheduled_track()) {
      if (scheduled_track_ != &::google::protobuf::internal::kEmptyString) {
        scheduled_track_->clear();
      }
    }
    if (has_actual_track()) {
      if (actual_track_ != &::google::protobuf::internal::kEmptyString) {
        actual_track_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NyctStopTimeUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string scheduled_track = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scheduled_track()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_actual_track;
        break;
      }

      // optional string actual_track = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_actual_track:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_actual_track()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NyctStopTimeUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string scheduled_track = 1;
  if (has_scheduled_track()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->scheduled_track(), output);
  }

  // optional string actual_track = 2;
  if (has_actual_track()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->actual_track(), output);
  }

}

int NyctStopTimeUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string scheduled_track = 1;
    if (has_scheduled_track()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scheduled_track());
    }

    // optional string actual_track = 2;
    if (has_actual_track()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->actual_track());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NyctStopTimeUpdate::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NyctStopTimeUpdate*>(&from));
}

void NyctStopTimeUpdate::MergeFrom(const NyctStopTimeUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scheduled_track()) {
      set_scheduled_track(from.scheduled_track());
    }
    if (from.has_actual_track()) {
      set_actual_track(from.actual_track());
    }
  }
}

void NyctStopTimeUpdate::CopyFrom(const NyctStopTimeUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NyctStopTimeUpdate::IsInitialized() const {

  return true;
}

void NyctStopTimeUpdate::Swap(NyctStopTimeUpdate* other) {
  if (other != this) {
    std::swap(scheduled_track_, other->scheduled_track_);
    std::swap(actual_track_, other->actual_track_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NyctStopTimeUpdate::GetTypeName() const {
  return "NyctStopTimeUpdate";
}

::google::protobuf::internal::ExtensionIdentifier< ::transit_realtime::FeedHeader,
    ::google::protobuf::internal::MessageTypeTraits< ::NyctFeedHeader >, 11, false >
  nyct_feed_header(kNyctFeedHeaderFieldNumber, ::NyctFeedHeader::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::transit_realtime::TripDescriptor,
    ::google::protobuf::internal::MessageTypeTraits< ::NyctTripDescriptor >, 11, false >
  nyct_trip_descriptor(kNyctTripDescriptorFieldNumber, ::NyctTripDescriptor::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::transit_realtime::TripUpdate_StopTimeUpdate,
    ::google::protobuf::internal::MessageTypeTraits< ::NyctStopTimeUpdate >, 11, false >
  nyct_stop_time_update(kNyctStopTimeUpdateFieldNumber, ::NyctStopTimeUpdate::default_instance());

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
