// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nyct-subway.proto

#ifndef PROTOBUF_nyct_2dsubway_2eproto__INCLUDED
#define PROTOBUF_nyct_2dsubway_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "gtfs-realtime.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_nyct_2dsubway_2eproto();
void protobuf_AssignDesc_nyct_2dsubway_2eproto();
void protobuf_ShutdownFile_nyct_2dsubway_2eproto();

class TripReplacementPeriod;
class NyctFeedHeader;
class NyctTripDescriptor;
class NyctStopTimeUpdate;

enum NyctTripDescriptor_Direction {
  NyctTripDescriptor_Direction_NORTH = 1,
  NyctTripDescriptor_Direction_EAST = 2,
  NyctTripDescriptor_Direction_SOUTH = 3,
  NyctTripDescriptor_Direction_WEST = 4
};
bool NyctTripDescriptor_Direction_IsValid(int value);
const NyctTripDescriptor_Direction NyctTripDescriptor_Direction_Direction_MIN = NyctTripDescriptor_Direction_NORTH;
const NyctTripDescriptor_Direction NyctTripDescriptor_Direction_Direction_MAX = NyctTripDescriptor_Direction_WEST;
const int NyctTripDescriptor_Direction_Direction_ARRAYSIZE = NyctTripDescriptor_Direction_Direction_MAX + 1;

// ===================================================================

class TripReplacementPeriod : public ::google::protobuf::MessageLite {
 public:
  TripReplacementPeriod();
  virtual ~TripReplacementPeriod();

  TripReplacementPeriod(const TripReplacementPeriod& from);

  inline TripReplacementPeriod& operator=(const TripReplacementPeriod& from) {
    CopyFrom(from);
    return *this;
  }

  static const TripReplacementPeriod& default_instance();

  void Swap(TripReplacementPeriod* other);

  // implements Message ----------------------------------------------

  TripReplacementPeriod* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const TripReplacementPeriod& from);
  void MergeFrom(const TripReplacementPeriod& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string route_id = 1;
  inline bool has_route_id() const;
  inline void clear_route_id();
  static const int kRouteIdFieldNumber = 1;
  inline const ::std::string& route_id() const;
  inline void set_route_id(const ::std::string& value);
  inline void set_route_id(const char* value);
  inline void set_route_id(const char* value, size_t size);
  inline ::std::string* mutable_route_id();
  inline ::std::string* release_route_id();
  inline void set_allocated_route_id(::std::string* route_id);

  // optional .transit_realtime.TimeRange replacement_period = 2;
  inline bool has_replacement_period() const;
  inline void clear_replacement_period();
  static const int kReplacementPeriodFieldNumber = 2;
  inline const ::transit_realtime::TimeRange& replacement_period() const;
  inline ::transit_realtime::TimeRange* mutable_replacement_period();
  inline ::transit_realtime::TimeRange* release_replacement_period();
  inline void set_allocated_replacement_period(::transit_realtime::TimeRange* replacement_period);

  // @@protoc_insertion_point(class_scope:TripReplacementPeriod)
 private:
  inline void set_has_route_id();
  inline void clear_has_route_id();
  inline void set_has_replacement_period();
  inline void clear_has_replacement_period();

  ::std::string* route_id_;
  ::transit_realtime::TimeRange* replacement_period_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_nyct_2dsubway_2eproto();
  friend void protobuf_AssignDesc_nyct_2dsubway_2eproto();
  friend void protobuf_ShutdownFile_nyct_2dsubway_2eproto();

  void InitAsDefaultInstance();
  static TripReplacementPeriod* default_instance_;
};
// -------------------------------------------------------------------

class NyctFeedHeader : public ::google::protobuf::MessageLite {
 public:
  NyctFeedHeader();
  virtual ~NyctFeedHeader();

  NyctFeedHeader(const NyctFeedHeader& from);

  inline NyctFeedHeader& operator=(const NyctFeedHeader& from) {
    CopyFrom(from);
    return *this;
  }

  static const NyctFeedHeader& default_instance();

  void Swap(NyctFeedHeader* other);

  // implements Message ----------------------------------------------

  NyctFeedHeader* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const NyctFeedHeader& from);
  void MergeFrom(const NyctFeedHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string nyct_subway_version = 1;
  inline bool has_nyct_subway_version() const;
  inline void clear_nyct_subway_version();
  static const int kNyctSubwayVersionFieldNumber = 1;
  inline const ::std::string& nyct_subway_version() const;
  inline void set_nyct_subway_version(const ::std::string& value);
  inline void set_nyct_subway_version(const char* value);
  inline void set_nyct_subway_version(const char* value, size_t size);
  inline ::std::string* mutable_nyct_subway_version();
  inline ::std::string* release_nyct_subway_version();
  inline void set_allocated_nyct_subway_version(::std::string* nyct_subway_version);

  // repeated .TripReplacementPeriod trip_replacement_period = 2;
  inline int trip_replacement_period_size() const;
  inline void clear_trip_replacement_period();
  static const int kTripReplacementPeriodFieldNumber = 2;
  inline const ::TripReplacementPeriod& trip_replacement_period(int index) const;
  inline ::TripReplacementPeriod* mutable_trip_replacement_period(int index);
  inline ::TripReplacementPeriod* add_trip_replacement_period();
  inline const ::google::protobuf::RepeatedPtrField< ::TripReplacementPeriod >&
      trip_replacement_period() const;
  inline ::google::protobuf::RepeatedPtrField< ::TripReplacementPeriod >*
      mutable_trip_replacement_period();

  // @@protoc_insertion_point(class_scope:NyctFeedHeader)
 private:
  inline void set_has_nyct_subway_version();
  inline void clear_has_nyct_subway_version();

  ::std::string* nyct_subway_version_;
  ::google::protobuf::RepeatedPtrField< ::TripReplacementPeriod > trip_replacement_period_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_nyct_2dsubway_2eproto();
  friend void protobuf_AssignDesc_nyct_2dsubway_2eproto();
  friend void protobuf_ShutdownFile_nyct_2dsubway_2eproto();

  void InitAsDefaultInstance();
  static NyctFeedHeader* default_instance_;
};
// -------------------------------------------------------------------

class NyctTripDescriptor : public ::google::protobuf::MessageLite {
 public:
  NyctTripDescriptor();
  virtual ~NyctTripDescriptor();

  NyctTripDescriptor(const NyctTripDescriptor& from);

  inline NyctTripDescriptor& operator=(const NyctTripDescriptor& from) {
    CopyFrom(from);
    return *this;
  }

  static const NyctTripDescriptor& default_instance();

  void Swap(NyctTripDescriptor* other);

  // implements Message ----------------------------------------------

  NyctTripDescriptor* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const NyctTripDescriptor& from);
  void MergeFrom(const NyctTripDescriptor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef NyctTripDescriptor_Direction Direction;
  static const Direction NORTH = NyctTripDescriptor_Direction_NORTH;
  static const Direction EAST = NyctTripDescriptor_Direction_EAST;
  static const Direction SOUTH = NyctTripDescriptor_Direction_SOUTH;
  static const Direction WEST = NyctTripDescriptor_Direction_WEST;
  static inline bool Direction_IsValid(int value) {
    return NyctTripDescriptor_Direction_IsValid(value);
  }
  static const Direction Direction_MIN =
    NyctTripDescriptor_Direction_Direction_MIN;
  static const Direction Direction_MAX =
    NyctTripDescriptor_Direction_Direction_MAX;
  static const int Direction_ARRAYSIZE =
    NyctTripDescriptor_Direction_Direction_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional string train_id = 1;
  inline bool has_train_id() const;
  inline void clear_train_id();
  static const int kTrainIdFieldNumber = 1;
  inline const ::std::string& train_id() const;
  inline void set_train_id(const ::std::string& value);
  inline void set_train_id(const char* value);
  inline void set_train_id(const char* value, size_t size);
  inline ::std::string* mutable_train_id();
  inline ::std::string* release_train_id();
  inline void set_allocated_train_id(::std::string* train_id);

  // optional bool is_assigned = 2;
  inline bool has_is_assigned() const;
  inline void clear_is_assigned();
  static const int kIsAssignedFieldNumber = 2;
  inline bool is_assigned() const;
  inline void set_is_assigned(bool value);

  // optional .NyctTripDescriptor.Direction direction = 3;
  inline bool has_direction() const;
  inline void clear_direction();
  static const int kDirectionFieldNumber = 3;
  inline ::NyctTripDescriptor_Direction direction() const;
  inline void set_direction(::NyctTripDescriptor_Direction value);

  // @@protoc_insertion_point(class_scope:NyctTripDescriptor)
 private:
  inline void set_has_train_id();
  inline void clear_has_train_id();
  inline void set_has_is_assigned();
  inline void clear_has_is_assigned();
  inline void set_has_direction();
  inline void clear_has_direction();

  ::std::string* train_id_;
  bool is_assigned_;
  int direction_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_nyct_2dsubway_2eproto();
  friend void protobuf_AssignDesc_nyct_2dsubway_2eproto();
  friend void protobuf_ShutdownFile_nyct_2dsubway_2eproto();

  void InitAsDefaultInstance();
  static NyctTripDescriptor* default_instance_;
};
// -------------------------------------------------------------------

class NyctStopTimeUpdate : public ::google::protobuf::MessageLite {
 public:
  NyctStopTimeUpdate();
  virtual ~NyctStopTimeUpdate();

  NyctStopTimeUpdate(const NyctStopTimeUpdate& from);

  inline NyctStopTimeUpdate& operator=(const NyctStopTimeUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  static const NyctStopTimeUpdate& default_instance();

  void Swap(NyctStopTimeUpdate* other);

  // implements Message ----------------------------------------------

  NyctStopTimeUpdate* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const NyctStopTimeUpdate& from);
  void MergeFrom(const NyctStopTimeUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string scheduled_track = 1;
  inline bool has_scheduled_track() const;
  inline void clear_scheduled_track();
  static const int kScheduledTrackFieldNumber = 1;
  inline const ::std::string& scheduled_track() const;
  inline void set_scheduled_track(const ::std::string& value);
  inline void set_scheduled_track(const char* value);
  inline void set_scheduled_track(const char* value, size_t size);
  inline ::std::string* mutable_scheduled_track();
  inline ::std::string* release_scheduled_track();
  inline void set_allocated_scheduled_track(::std::string* scheduled_track);

  // optional string actual_track = 2;
  inline bool has_actual_track() const;
  inline void clear_actual_track();
  static const int kActualTrackFieldNumber = 2;
  inline const ::std::string& actual_track() const;
  inline void set_actual_track(const ::std::string& value);
  inline void set_actual_track(const char* value);
  inline void set_actual_track(const char* value, size_t size);
  inline ::std::string* mutable_actual_track();
  inline ::std::string* release_actual_track();
  inline void set_allocated_actual_track(::std::string* actual_track);

  // @@protoc_insertion_point(class_scope:NyctStopTimeUpdate)
 private:
  inline void set_has_scheduled_track();
  inline void clear_has_scheduled_track();
  inline void set_has_actual_track();
  inline void clear_has_actual_track();

  ::std::string* scheduled_track_;
  ::std::string* actual_track_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_nyct_2dsubway_2eproto();
  friend void protobuf_AssignDesc_nyct_2dsubway_2eproto();
  friend void protobuf_ShutdownFile_nyct_2dsubway_2eproto();

  void InitAsDefaultInstance();
  static NyctStopTimeUpdate* default_instance_;
};
// ===================================================================

static const int kNyctFeedHeaderFieldNumber = 1001;
extern ::google::protobuf::internal::ExtensionIdentifier< ::transit_realtime::FeedHeader,
    ::google::protobuf::internal::MessageTypeTraits< ::NyctFeedHeader >, 11, false >
  nyct_feed_header;
static const int kNyctTripDescriptorFieldNumber = 1001;
extern ::google::protobuf::internal::ExtensionIdentifier< ::transit_realtime::TripDescriptor,
    ::google::protobuf::internal::MessageTypeTraits< ::NyctTripDescriptor >, 11, false >
  nyct_trip_descriptor;
static const int kNyctStopTimeUpdateFieldNumber = 1001;
extern ::google::protobuf::internal::ExtensionIdentifier< ::transit_realtime::TripUpdate_StopTimeUpdate,
    ::google::protobuf::internal::MessageTypeTraits< ::NyctStopTimeUpdate >, 11, false >
  nyct_stop_time_update;

// ===================================================================

// TripReplacementPeriod

// optional string route_id = 1;
inline bool TripReplacementPeriod::has_route_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TripReplacementPeriod::set_has_route_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TripReplacementPeriod::clear_has_route_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TripReplacementPeriod::clear_route_id() {
  if (route_id_ != &::google::protobuf::internal::kEmptyString) {
    route_id_->clear();
  }
  clear_has_route_id();
}
inline const ::std::string& TripReplacementPeriod::route_id() const {
  return *route_id_;
}
inline void TripReplacementPeriod::set_route_id(const ::std::string& value) {
  set_has_route_id();
  if (route_id_ == &::google::protobuf::internal::kEmptyString) {
    route_id_ = new ::std::string;
  }
  route_id_->assign(value);
}
inline void TripReplacementPeriod::set_route_id(const char* value) {
  set_has_route_id();
  if (route_id_ == &::google::protobuf::internal::kEmptyString) {
    route_id_ = new ::std::string;
  }
  route_id_->assign(value);
}
inline void TripReplacementPeriod::set_route_id(const char* value, size_t size) {
  set_has_route_id();
  if (route_id_ == &::google::protobuf::internal::kEmptyString) {
    route_id_ = new ::std::string;
  }
  route_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TripReplacementPeriod::mutable_route_id() {
  set_has_route_id();
  if (route_id_ == &::google::protobuf::internal::kEmptyString) {
    route_id_ = new ::std::string;
  }
  return route_id_;
}
inline ::std::string* TripReplacementPeriod::release_route_id() {
  clear_has_route_id();
  if (route_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = route_id_;
    route_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TripReplacementPeriod::set_allocated_route_id(::std::string* route_id) {
  if (route_id_ != &::google::protobuf::internal::kEmptyString) {
    delete route_id_;
  }
  if (route_id) {
    set_has_route_id();
    route_id_ = route_id;
  } else {
    clear_has_route_id();
    route_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .transit_realtime.TimeRange replacement_period = 2;
inline bool TripReplacementPeriod::has_replacement_period() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TripReplacementPeriod::set_has_replacement_period() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TripReplacementPeriod::clear_has_replacement_period() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TripReplacementPeriod::clear_replacement_period() {
  if (replacement_period_ != NULL) replacement_period_->::transit_realtime::TimeRange::Clear();
  clear_has_replacement_period();
}
inline const ::transit_realtime::TimeRange& TripReplacementPeriod::replacement_period() const {
  return replacement_period_ != NULL ? *replacement_period_ : *default_instance_->replacement_period_;
}
inline ::transit_realtime::TimeRange* TripReplacementPeriod::mutable_replacement_period() {
  set_has_replacement_period();
  if (replacement_period_ == NULL) replacement_period_ = new ::transit_realtime::TimeRange;
  return replacement_period_;
}
inline ::transit_realtime::TimeRange* TripReplacementPeriod::release_replacement_period() {
  clear_has_replacement_period();
  ::transit_realtime::TimeRange* temp = replacement_period_;
  replacement_period_ = NULL;
  return temp;
}
inline void TripReplacementPeriod::set_allocated_replacement_period(::transit_realtime::TimeRange* replacement_period) {
  delete replacement_period_;
  replacement_period_ = replacement_period;
  if (replacement_period) {
    set_has_replacement_period();
  } else {
    clear_has_replacement_period();
  }
}

// -------------------------------------------------------------------

// NyctFeedHeader

// required string nyct_subway_version = 1;
inline bool NyctFeedHeader::has_nyct_subway_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NyctFeedHeader::set_has_nyct_subway_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NyctFeedHeader::clear_has_nyct_subway_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NyctFeedHeader::clear_nyct_subway_version() {
  if (nyct_subway_version_ != &::google::protobuf::internal::kEmptyString) {
    nyct_subway_version_->clear();
  }
  clear_has_nyct_subway_version();
}
inline const ::std::string& NyctFeedHeader::nyct_subway_version() const {
  return *nyct_subway_version_;
}
inline void NyctFeedHeader::set_nyct_subway_version(const ::std::string& value) {
  set_has_nyct_subway_version();
  if (nyct_subway_version_ == &::google::protobuf::internal::kEmptyString) {
    nyct_subway_version_ = new ::std::string;
  }
  nyct_subway_version_->assign(value);
}
inline void NyctFeedHeader::set_nyct_subway_version(const char* value) {
  set_has_nyct_subway_version();
  if (nyct_subway_version_ == &::google::protobuf::internal::kEmptyString) {
    nyct_subway_version_ = new ::std::string;
  }
  nyct_subway_version_->assign(value);
}
inline void NyctFeedHeader::set_nyct_subway_version(const char* value, size_t size) {
  set_has_nyct_subway_version();
  if (nyct_subway_version_ == &::google::protobuf::internal::kEmptyString) {
    nyct_subway_version_ = new ::std::string;
  }
  nyct_subway_version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NyctFeedHeader::mutable_nyct_subway_version() {
  set_has_nyct_subway_version();
  if (nyct_subway_version_ == &::google::protobuf::internal::kEmptyString) {
    nyct_subway_version_ = new ::std::string;
  }
  return nyct_subway_version_;
}
inline ::std::string* NyctFeedHeader::release_nyct_subway_version() {
  clear_has_nyct_subway_version();
  if (nyct_subway_version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nyct_subway_version_;
    nyct_subway_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NyctFeedHeader::set_allocated_nyct_subway_version(::std::string* nyct_subway_version) {
  if (nyct_subway_version_ != &::google::protobuf::internal::kEmptyString) {
    delete nyct_subway_version_;
  }
  if (nyct_subway_version) {
    set_has_nyct_subway_version();
    nyct_subway_version_ = nyct_subway_version;
  } else {
    clear_has_nyct_subway_version();
    nyct_subway_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .TripReplacementPeriod trip_replacement_period = 2;
inline int NyctFeedHeader::trip_replacement_period_size() const {
  return trip_replacement_period_.size();
}
inline void NyctFeedHeader::clear_trip_replacement_period() {
  trip_replacement_period_.Clear();
}
inline const ::TripReplacementPeriod& NyctFeedHeader::trip_replacement_period(int index) const {
  return trip_replacement_period_.Get(index);
}
inline ::TripReplacementPeriod* NyctFeedHeader::mutable_trip_replacement_period(int index) {
  return trip_replacement_period_.Mutable(index);
}
inline ::TripReplacementPeriod* NyctFeedHeader::add_trip_replacement_period() {
  return trip_replacement_period_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TripReplacementPeriod >&
NyctFeedHeader::trip_replacement_period() const {
  return trip_replacement_period_;
}
inline ::google::protobuf::RepeatedPtrField< ::TripReplacementPeriod >*
NyctFeedHeader::mutable_trip_replacement_period() {
  return &trip_replacement_period_;
}

// -------------------------------------------------------------------

// NyctTripDescriptor

// optional string train_id = 1;
inline bool NyctTripDescriptor::has_train_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NyctTripDescriptor::set_has_train_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NyctTripDescriptor::clear_has_train_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NyctTripDescriptor::clear_train_id() {
  if (train_id_ != &::google::protobuf::internal::kEmptyString) {
    train_id_->clear();
  }
  clear_has_train_id();
}
inline const ::std::string& NyctTripDescriptor::train_id() const {
  return *train_id_;
}
inline void NyctTripDescriptor::set_train_id(const ::std::string& value) {
  set_has_train_id();
  if (train_id_ == &::google::protobuf::internal::kEmptyString) {
    train_id_ = new ::std::string;
  }
  train_id_->assign(value);
}
inline void NyctTripDescriptor::set_train_id(const char* value) {
  set_has_train_id();
  if (train_id_ == &::google::protobuf::internal::kEmptyString) {
    train_id_ = new ::std::string;
  }
  train_id_->assign(value);
}
inline void NyctTripDescriptor::set_train_id(const char* value, size_t size) {
  set_has_train_id();
  if (train_id_ == &::google::protobuf::internal::kEmptyString) {
    train_id_ = new ::std::string;
  }
  train_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NyctTripDescriptor::mutable_train_id() {
  set_has_train_id();
  if (train_id_ == &::google::protobuf::internal::kEmptyString) {
    train_id_ = new ::std::string;
  }
  return train_id_;
}
inline ::std::string* NyctTripDescriptor::release_train_id() {
  clear_has_train_id();
  if (train_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = train_id_;
    train_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NyctTripDescriptor::set_allocated_train_id(::std::string* train_id) {
  if (train_id_ != &::google::protobuf::internal::kEmptyString) {
    delete train_id_;
  }
  if (train_id) {
    set_has_train_id();
    train_id_ = train_id;
  } else {
    clear_has_train_id();
    train_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool is_assigned = 2;
inline bool NyctTripDescriptor::has_is_assigned() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NyctTripDescriptor::set_has_is_assigned() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NyctTripDescriptor::clear_has_is_assigned() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NyctTripDescriptor::clear_is_assigned() {
  is_assigned_ = false;
  clear_has_is_assigned();
}
inline bool NyctTripDescriptor::is_assigned() const {
  return is_assigned_;
}
inline void NyctTripDescriptor::set_is_assigned(bool value) {
  set_has_is_assigned();
  is_assigned_ = value;
}

// optional .NyctTripDescriptor.Direction direction = 3;
inline bool NyctTripDescriptor::has_direction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NyctTripDescriptor::set_has_direction() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NyctTripDescriptor::clear_has_direction() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NyctTripDescriptor::clear_direction() {
  direction_ = 1;
  clear_has_direction();
}
inline ::NyctTripDescriptor_Direction NyctTripDescriptor::direction() const {
  return static_cast< ::NyctTripDescriptor_Direction >(direction_);
}
inline void NyctTripDescriptor::set_direction(::NyctTripDescriptor_Direction value) {
  assert(::NyctTripDescriptor_Direction_IsValid(value));
  set_has_direction();
  direction_ = value;
}

// -------------------------------------------------------------------

// NyctStopTimeUpdate

// optional string scheduled_track = 1;
inline bool NyctStopTimeUpdate::has_scheduled_track() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NyctStopTimeUpdate::set_has_scheduled_track() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NyctStopTimeUpdate::clear_has_scheduled_track() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NyctStopTimeUpdate::clear_scheduled_track() {
  if (scheduled_track_ != &::google::protobuf::internal::kEmptyString) {
    scheduled_track_->clear();
  }
  clear_has_scheduled_track();
}
inline const ::std::string& NyctStopTimeUpdate::scheduled_track() const {
  return *scheduled_track_;
}
inline void NyctStopTimeUpdate::set_scheduled_track(const ::std::string& value) {
  set_has_scheduled_track();
  if (scheduled_track_ == &::google::protobuf::internal::kEmptyString) {
    scheduled_track_ = new ::std::string;
  }
  scheduled_track_->assign(value);
}
inline void NyctStopTimeUpdate::set_scheduled_track(const char* value) {
  set_has_scheduled_track();
  if (scheduled_track_ == &::google::protobuf::internal::kEmptyString) {
    scheduled_track_ = new ::std::string;
  }
  scheduled_track_->assign(value);
}
inline void NyctStopTimeUpdate::set_scheduled_track(const char* value, size_t size) {
  set_has_scheduled_track();
  if (scheduled_track_ == &::google::protobuf::internal::kEmptyString) {
    scheduled_track_ = new ::std::string;
  }
  scheduled_track_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NyctStopTimeUpdate::mutable_scheduled_track() {
  set_has_scheduled_track();
  if (scheduled_track_ == &::google::protobuf::internal::kEmptyString) {
    scheduled_track_ = new ::std::string;
  }
  return scheduled_track_;
}
inline ::std::string* NyctStopTimeUpdate::release_scheduled_track() {
  clear_has_scheduled_track();
  if (scheduled_track_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = scheduled_track_;
    scheduled_track_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NyctStopTimeUpdate::set_allocated_scheduled_track(::std::string* scheduled_track) {
  if (scheduled_track_ != &::google::protobuf::internal::kEmptyString) {
    delete scheduled_track_;
  }
  if (scheduled_track) {
    set_has_scheduled_track();
    scheduled_track_ = scheduled_track;
  } else {
    clear_has_scheduled_track();
    scheduled_track_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string actual_track = 2;
inline bool NyctStopTimeUpdate::has_actual_track() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NyctStopTimeUpdate::set_has_actual_track() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NyctStopTimeUpdate::clear_has_actual_track() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NyctStopTimeUpdate::clear_actual_track() {
  if (actual_track_ != &::google::protobuf::internal::kEmptyString) {
    actual_track_->clear();
  }
  clear_has_actual_track();
}
inline const ::std::string& NyctStopTimeUpdate::actual_track() const {
  return *actual_track_;
}
inline void NyctStopTimeUpdate::set_actual_track(const ::std::string& value) {
  set_has_actual_track();
  if (actual_track_ == &::google::protobuf::internal::kEmptyString) {
    actual_track_ = new ::std::string;
  }
  actual_track_->assign(value);
}
inline void NyctStopTimeUpdate::set_actual_track(const char* value) {
  set_has_actual_track();
  if (actual_track_ == &::google::protobuf::internal::kEmptyString) {
    actual_track_ = new ::std::string;
  }
  actual_track_->assign(value);
}
inline void NyctStopTimeUpdate::set_actual_track(const char* value, size_t size) {
  set_has_actual_track();
  if (actual_track_ == &::google::protobuf::internal::kEmptyString) {
    actual_track_ = new ::std::string;
  }
  actual_track_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NyctStopTimeUpdate::mutable_actual_track() {
  set_has_actual_track();
  if (actual_track_ == &::google::protobuf::internal::kEmptyString) {
    actual_track_ = new ::std::string;
  }
  return actual_track_;
}
inline ::std::string* NyctStopTimeUpdate::release_actual_track() {
  clear_has_actual_track();
  if (actual_track_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = actual_track_;
    actual_track_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NyctStopTimeUpdate::set_allocated_actual_track(::std::string* actual_track) {
  if (actual_track_ != &::google::protobuf::internal::kEmptyString) {
    delete actual_track_;
  }
  if (actual_track) {
    set_has_actual_track();
    actual_track_ = actual_track;
  } else {
    clear_has_actual_track();
    actual_track_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_nyct_2dsubway_2eproto__INCLUDED
